Form işlemi -> Edit sayfası için form yollanması
Durum: Kullanıcı Index sayfasına girer. Index'te data tablosu vardır. Her bir data'nın sağ kısmında edit,delete,details gibi linkler vardır. Bunlara tıklandığında ilgili view'a gidilir. 
Index'te herhangi bir datanın sağ kısmındaki Edit'e basıldığında, data'nın id'sine göre Edit actionresult'ı çalışır. ActionResult'ta -> gelen ID'ye göre database'deki entity bulunur. Bu entity view'a yapıştırılır. Entity'nin property'leri bir form içinde view'un içinde yazılır.

Edit view'u:

@model KitapAppEncore.Models.Book
 
@{
    ViewData["Title"] = "Edit";
}
 
<h1>Edit</h1>
 
<h4>Book</h4>
<hr />
 
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Comment" class="control-label"></label>
                <input asp-for="Comment" class="form-control" />
                <span asp-validation-for="Comment" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Page" class="control-label"></label>
                <input asp-for="Page" class="form-control" />
                <span asp-validation-for="Page" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="CurrentPage" class="control-label"></label>
                <input asp-for="CurrentPage" class="form-control" />
                <span asp-validation-for="CurrentPage" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="About" class="control-label"></label>
                <input asp-for="About" class="form-control" />
                <span asp-validation-for="About" class="text-danger"></span>
            </div>
            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="IsFavourite" /> @Html.DisplayNameFor(model => model.IsFavourite)
                </label>
            </div>
            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="IsRead" /> @Html.DisplayNameFor(model => model.IsRead)
                </label>
            </div>
            <div class="form-group">
                <label asp-for="GenreId" class="control-label"></label>
                <select asp-for="GenreId" class="form-control" asp-items="ViewBag.GenreId"></select>
                <span asp-validation-for="GenreId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>
 
<div>
    <a asp-action="Index">Back to List</a>
</div>
 
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}



[HttpGet]
public async Task<IActionResult> Edit(int? id)
{
    if (id == null)
    {
        return NotFound();
    }
 
    var book = await _context.Books.FindAsync(id);
    if (book == null)
    {
        return NotFound();
    }
    ViewData["GenreId"] = new SelectList(_context.Genres, "Id", "Id", book.GenreId);
    return View(book);
}

[HttpPost]
     [ValidateAntiForgeryToken]
     //public async Task<IActionResult> Edit(int id, [Bind("Id,Name,Comment,Page,PageNumber,CurrentPage,About,IsFavourite,IsRead,GenreId")] Book book)
     //Yukarıdaki Bind metodu da kullanılabilir (güvenlik için). Aşağıdakinden daha güvenli olacaktır. 
     public async Task<IActionResult> Edit(int id, string Name, string name, Book book) //buradaki parametre isimleri (id, Name, name) --> entity'nin property'lerinden geliyor (yani Book book'un property'leri). Görüldüğü üzere büyük küçük harf duyarlı değil (Name de, name de aynı)
     {
         if (id != book.Id)
         {
             return NotFound();
         }
 
         if (ModelState.IsValid)
         {
             try
             {
                 _context.Update(book);
                 await _context.SaveChangesAsync();
             }
             catch (DbUpdateConcurrencyException)
             {
                 if (!BookExists(book.Id))
                 {
                     return NotFound();
                 }
                 else
                 {
                     throw;
                 }
             }
             return RedirectToAction(nameof(Index));
         }
         ViewData["GenreId"] = new SelectList(_context.Genres, "Id", "Id", book.GenreId);
         return View(book);
     }
 

@Html.TextBoxFor(p=>p.Name)

Şu formda entity'nin property'leri boş olarak ActionResult'a ulaşıyor:
Bunun sebebi olarak şu söylense doğru olabilir: Burada bir form doldurma işlemi yapmıyoruz, görüleceği üzere input element'lerini içermiyor:
-örneğin bu view'un içine:
@Html.TextBoxFor(p=>p.Name)

Şeklinde bir textbox eklersek; bu textbox içine yazdığımız değer ActionResult'a ulaşacaktır (Entity'nin property'si kısmında veya aynı isimdeki parametreye ulaşacaktır: public async Task<IActionResult> DeleteConfirmed(int id, Book bookHere, string Name, string name)
Yukarıda ActionResult'ı görüyoruz. İşte bunun parametreleri olan bookHere'nin Name property'si içinde görebiliriz form içinde yolladığımız Name verisini...
Ayrıca bu property'nin adını da bu parametrelerde kullanarak aynı veriyi burada yakalayabiliriz. Dikkat; isimler uyuşmalıdır. TextBoxFor hangi property için oluşturulmuştu? Name property'si için:
@Html.TextBoxFor(p=>p.Name)

Peki ActionResult içinde bu Name property'sini çekmek için hangi isme sahip bir parametre oluşturmalıyız? Tabi ki Name ismine sahip bir parametre oluşturmalıyız. Büyük küçük harf duyarlılığı yoktur. Yani şu parametreler oluşturulabilir:
String name
String Name
İkisi de uygundur. Form'dan gelen veri buraya düşecektir.
Şimdi delete'nin view ve actionresult'ını görelim:


@model KitapAppEncore.Models.Book
 
@{
    ViewData["Title"] = "Delete";
}
 
<h1>Delete</h1>
 
<h3>Are you sure you want to delete this?</h3>
<div>
    <form asp-action="Delete">
 
        <h4>Book</h4>
        <hr />
        <dl class="row">
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Name)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Name)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Comment)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Comment)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Page)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Page)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Page)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Page)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.CurrentPage)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.CurrentPage)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.About)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.About)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.IsFavourite)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.IsFavourite)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.IsRead)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.IsRead)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Genre)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Genre.Id)
            </dd>
        </dl>
        @*<input type="hidden" asp-for="Id" />
            <input type="hidden" asp-for="Name" />*@
        <input type="submit" value="DeleteThs" class="btn btn-danger" /> |
        <a asp-action="Index">Back to List</a>
        
        <div class="form-group">
            <label asp-for="Name" class="control-label"></label>
            <input asp-for="Name" class="form-control" />
            <span asp-validation-for="Name" class="text-danger"></span>
        </div>
    </form>
</div>



// GET: Book/Delete/5
public async Task<IActionResult> Delete(int? id)
{
    if (id == null)
    {
        return NotFound();
    }
 
    var book = await _context.Books
        .Include(b => b.Genre)
        .FirstOrDefaultAsync(m => m.Id == id);
    if (book == null)
    {
        return NotFound();
    }
 
    return View(book);
}
 
//[HttpPost]
//public ActionResult Delete(Book book)
//{
//    return View();
//}
 
[HttpPost, ActionName("Delete")] //Delete nin POST işlemi olduğuna DİKKAT. DeleteConfirmed değil...
[ValidateAntiForgeryToken]
public async Task<IActionResult> DeleteConfirmed(int id, Book bookHere)
{
    return RedirectToAction(nameof(Index));

    var book = await _context.Books.FindAsync(id);
    _context.Books.Remove(book);
    await _context.SaveChangesAsync();
    return RedirectToAction(nameof(Index));
        }

