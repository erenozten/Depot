using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;

namespace TrainingLinqAndSql
{
    class Program
    {
        static void Main(string[] args)
        {
            // inner join örneği 
            // İki tablodaki id'leri eşleşen tüm veriler çekiliyor
            var result = Employee.GetAllEmployees().Join(Department.GetAllDepartments(), e => e.DepartmentId, d => d.Id, 
                (emp, dep) => new
                {
                    NewName = emp.Name,
                    NewDepartment = dep.Name
                });

            foreach (var item in result)
            {
                Console.WriteLine(item.NewName + " " + item.NewDepartment);
            }

            Console.WriteLine("---");

            var result2 = Employee.GetAllEmployees().Where(e=>e.DepartmentId == 1).Join(Department.GetAllDepartments(), e => e.DepartmentId, d => d.Id,
                (emp, dep) => new
                {
                    NewName = emp.Name,
                    NewDepartment = dep.Name
                });

            foreach (var item in result2)
            {
                Console.WriteLine(item.NewName + " " + item.NewDepartment);
            }
        }
    }

    class Employee
    {
        [Key]
        public int Id { get; set; }
        public string Name { get; set; }

        [ForeignKey("Department")]
        public int DepartmentId { get; set; }

        public Department Department { get; set; }

        public static List<Employee> GetAllEmployees()
        {
            return new List<Employee>()
            {
                new Employee()
                {
                    Id = 1,
                    Name = "Ahmet",
                    DepartmentId = 1
                },
                new Employee()
                {
                    Id = 2,
                    Name = "Mehmet",
                    DepartmentId = 1
                },
                new Employee()
                {
                    Id = 3,
                    Name = "Necdet",
                    DepartmentId = 2
                },
                new Employee()
                {
                    Id = 4,
                    Name = "Şevket",
                    DepartmentId = 2
                },
                new Employee()
                {
                    Id = 5,
                    Name = "Hıdır",
                },
                new Employee()
                {
                    Id = 6,
                    Name = "Murat"
                },
            }; // örnek employee'ler oluşturulup bu employee'lerin içinde olduğu liste dönülüyor.
        }
    }

    class Department
    {
        [Key]
        public int Id { get; set; }
        public string Name { get; set; }

        public List<Employee> Employees { get; set; } = new List<Employee>();

        public static List<Department> GetAllDepartments()
        {
            return new List<Department>()
            {
                new Department()
                {
                    Id = 1,
                    Name = "HR"
                },
                new Department()
                {
                    Id = 2,
                    Name = "IT"
                },
                new Department()
                {
                    Id = 3,
                    Name = "Payroll"
                },
            }; // örnek department'lar oluşturulup bu department'ların içinde olduğu liste dönülüyor.
        }
    }

}

-
-
-
-
-
-
        {
            int sayi = 942 / 10;
            string str = sayi.ToString(); // sonuç 94   - Yani sondaki rakamı attı.

            int sayi2 = 8 / 10;
            string str2 = sayi2.ToString(); // sonuç 0  -  sekizi ona böldü, buradan sonucu sıfır veriyor. Mantıken de böyle olmalı gibi.
        }
-
-
-
-
-
-
A LANGUAGE IS STRONGLY TYPED if the compiler can guarantee that the accepted programs will execute without type errors. 
-
-

CREATE PROCEDURE NEW44
AS
BEGIN
SELECT [CompanyName], [ContactName]
FROM CUSTOMERS
WHERE [ContactName] LIKE 'A_A_E%'
END
GO
-
-
-
-
-
-
CREATE PROCEDURE QWE
AS
BEGIN
SELECT ColumnName, ColumnId FROM DB 
WHERE  ColumnaSDF LIKE '_%2%_'   -- where içinde kullanılacak property'i SELECT ile seçmemiz gerekmiyor
END
GO
-
-
-
-
-
-
class Kutu
  {
      public int Yukseklik { get; set; }
      public int Genislik { get; set; }
 
      public Kutu(int yuk, int gen)
      {
          Yukseklik = yuk;
          Genislik = gen;
      }
 
      public static Kutu operator *(Kutu k1, Kutu k2)  // eksi işareti de kullanılabilirdi. Sonuç değişmez. Operatörle ilgisi yok yani. + - * / hepsi aynı sonuç.
      {
          int toplamYukseklik = k1.Yukseklik + k2.Yukseklik;
          int toplamGenislik = k1.Genislik + k2.Genislik;
 
          Kutu k3 = new Kutu(toplamYukseklik, toplamGenislik);
          return k3;
      }
  }
 
  static void Main(string[] args)
  {
      Kutu k1 = new Kutu(7, 3);
      Kutu k2 = new Kutu(16, 4);
      Kutu k3 = k1 * k2; // burada, static'te belirttiğimiz operatörü kullanıyoruz: *
 
      Console.WriteLine(k3.Yukseklik); //19
      Console.WriteLine(k3.Genislik); //10
      Console.ReadKey();
  }
-
-
-
-
-
-
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

class Program
{
    class Student
    {
        public string Name { get; set; }
    }

    class Araba: IAraba
    {
        // IAraba'nın metotlarını implement etmesi gerek...

        public void Cam() // implement edilen metotlar PUBLIC olmak zorunda.
        {
            Console.WriteLine("");
        }

        public void Teker()
        {

        }

        public string CamaYaziYazdir()
        {
            return "Text";
        }

        public Student OgrenciyiArabayaBindir()
        {
            Student student = new Student();
            return student;
        }
    }

    //class gibi bir şeydir interface. Parantez açıp kapama yokk. Zaten anlamsız oluyor diğer şekilde.
    interface IAraba
    {
        void Cam(); // köşeli parantez yokk
        void Teker();
        string CamaYaziYazdir();
        Student OgrenciyiArabayaBindir();
    }
}

CREATE PROCEDURE QWE
AS
BEGIN
SELECT ColumnName, ColumnId FROM DB 
WHERE  ColumnaSDF LIKE '_%2%_' 
END
-
-
xCode             (GITHUB)  (test) 
xCode nedir
Xcode macOS, iOS, watchOS ve tvOS için yazılım geliştirmek için Apple tarafından geliştirilen macOS için entegre bir tümleşik geliştirme ortamıdır. Yazılım geliştirme araçlarını içerir. İlk kez 2003 yılında piyasaya çıkan hizmetin en istikrarlı sürümü, sürüm 8.3.3'tür ve Mac App Store'den macOS Sierra kullanıcıları için ücretsiz olarak sunulmaktadır. Kayıtlı geliştiriciler, Apple Developer web sitesinden paketi önizleme sürümlerini ve önceki sürümlerini indirebilirler. Bununla birlikte, Apple son zamanlarda yazılımın sürüm 9 beta 2'nin beta versiyonunu Apple Developer hesaplarıyla halka açık hale getirdi.
-
-
WebPack             (GITHUB)  (test) 
Webpack nedir
Webpack is an open-source JavaScript module bundler. It is made primarily for JavaScript, but it can transform front-end assets such as HTML, CSS, and images if the corresponding loaders are included. webpack takes modules with dependencies and generates static assets representing those modules.
Webpack takes the dependencies and generates a dependency graph allowing web developers to use a modular approach for their web application development purposes. It can be used from the command line, or can be configured using a config file which is named webpack.config.js. This file is used to define rules, plugins, etc., for a project. (webpack is highly extensible via rules which allow developers to write custom tasks that they want to perform when bundling files together.)
Node.js is required for using webpack.
webpack provides code on demand using the moniker code splitting. The Technical Committee 39 for ECMAScript is working on standardization of a function that loads additional code: "proposal-dynamic-import".
-
-
-
CSS (Cascading Style Sheets)             (GITHUB)  (test) 
Css nedir
CSS, “Cascading Style Sheets” kelimelerinin kısaltılmasından oluştur ve türkçe anlamı Basamaklı Stil Şablonları ya da Basamaklı Biçim Sayfaları şeklindedir.
Cascading Style Sheets (CSS) is a style sheet language used for describing the presentation of a document written in a markup language such as HTML.[1] CSS is a cornerstone technology of the World Wide Web, alongside HTML and JavaScript.[2]
CSS is designed to enable the separation of presentation and content, including layout, colors, and fonts.[3] This separation can improve content accessibility, provide more flexibility and control in the specification of presentation characteristics, enable multiple web pages to share formatting by specifying the relevant CSS in a separate .css file which reduces complexity and repetition in the structural content as well as enabling the .css file to be cached to improve the page load speed between the pages that share the file and its formatting.
Separation of formatting and content also makes it feasible to present the same markup page in different styles for different rendering methods, such as on-screen, in print, by voice (via speech-based browser or screen reader), and on Braille-based tactile devices. CSS also has rules for alternate formatting if the content is accessed on a mobile device.[4]
The name cascading comes from the specified priority scheme to determine which style rule applies if more than one rule matches a particular element. This cascading priority scheme is predictable.
The CSS specifications are maintained by the World Wide Web Consortium (W3C). Internet media type (MIME type) text/css is registered for use with CSS by RFC 2318 (March 1998). The W3C operates a free CSS validation service for CSS documents.[5]
In addition to HTML, other markup languages support the use of CSS including XHTML, plain XML, SVG, and XUL.
-
-
-
ANSI C
 
Gömülü sistemler alanında bilinmesi gereken temel şeylerden biri ANSI C programlama dilidir. Belki C dilini duymuşsunuzdur ama ANSI de ne diye soruyor olabilirsiniz. Kısaca açıklayayım:
ANSI – Amerikan Ulusal Standartlar Enstitüsü’nün adıdır. ANSI C ile bu kurumun yayınlamış olduğu C programlama dili standartıdır. En geniş kullanımı olan standart 89 yılında yayınlanmıştır. Bu standart ayrıca ANSI C89 olarak da bilinmekte. Şu an birçok derleyici bu standarta göre tasarlanmıştır.
C ve C++ dilleri farklı olsalar da genellikle bir arada anılıyorlar. Bu konudan daha önceki “C ve C++” farklı programlama dilleridir” yazımda bahsetmiştim. Gömülü sistemler alanında en çok kullanımı bulunan dil C’dir. C dili prosedürel bir dil iken C++ nesneye yönelik bir dildir. Diller değerlendirilirken bu iki fark gözetilmelidir.
C dili hem assembly gibi donanıma yakın hem de üst seviye dillerin özelliklerine sahip bir dil olduğundan mikroişlemci / mikrodenetleyici tabanlı sistemlerin programlanmasında vazgeçilmez hale gelmiştir. Dolayısıyla gömülü sistemler alanında çalışma yapmak için bu dili öğrenmek de kaçınılmazdır.
ANSI C öğrenmek denildiğinde sadece bir dil öğrenmekten değil aynı zamanda işlemcilerin çalışma mantığını da öğrenmekten bahsediyoruz. Çoğu zaman donanımla direk olarak konuşan sürücüler yazmak zorunda kalındığında o donanımın yapısı ve çalışma biçimi iyice kavranmadan bunu gerçekleştirmek çok zordur. C dili bize assembly dilinin gücüne yakın bir şekilde ve aynı zamanda onun zorluklarından sıyrılarak programlama yapma olanağı sağlamaktadır.
ANSI C çalışmaya herhangi bir mikrodenetleyici kullanmadan başlayabilirsiniz. Bunun için internette ücretsiz derleyiciler bulunabiliyor. Bunlardan en yaygın kullanılan bir tanesi DEV-C’yi bu linkten indirebilirsiniz. Dev-C ile C çalışmalarınızı gerçekleştirerek dili iyice kavrayabilirsiniz.
-
-
-
ANSI C, ISO C and Standard C are successive standards for the C programming language published by the American National Standards Institute (ANSI) and the International Organization for Standardization (ISO). Historically, the names referred specifically to the original and best-supported version of the standard (known as C89 or C90). Software developers writing in C are encouraged to conform to the standards, as doing so helps portability between compilers.
-
-
-
-
ANSI
The American National Standards Institute (ANSI /ˈænsi/ AN-see) is a private non-profit organization that oversees the development of voluntary consensus standards for products, services, processes, systems, and personnel in the United States.[3] The organization also coordinates U.S. standards with international standards so that American products can be used worldwide.
ANSI accredits standards that are developed by representatives of other standards organizations, government agencies, consumer groups, companies, and others. These standards ensure that the characteristics and performance of products are consistent, that people use the same definitions and terms, and that products are tested the same way. ANSI also accredits organizations that carry out product or personnel certification in accordance with requirements defined in international standards.[4]
The organization's headquarters are in Washington, D.C. ANSI's operations office is located in New York City. The ANSI annual operating budget is funded by the sale of publications, membership dues and fees, accreditation services, fee-based programs, and international standards programs.
-
-
-
-





Bell Labs	(empty)  (empty) 
Bell labs nedir
Renkler: yazı örnek yazı yazı örnek yazı yazı örnek yazı 
-
-
Bell Laboratuvarları (ayrıca Bell Labs ve geçmişte AT&T Bell Laboratuvarları ve Bell Telefon Laboratuvarları olarak bilinir), önceleri American Telephone & Telegraph Company (AT&T) 'nin şimdilerde ise Alcatel-Lucent 'in araştırma geliştirme kurumudur. Merkezi Murray Hill, New Jersey ABD'de bulunmaktadır.

 
Transistörler 1947'de Bell Laboratuvarları'nda icat edilmiştir
 
Murray Hill, New Jersey'deki Bell Laboratuvarları

En başarılı zamanlarında, Bell Laboratuvarları radyo astronomi, transistör, lazer, enformasyon teorisi, UNIX işletim sistemi, ve C programlama dili dahil çok çeşitli devrimsel teknolojiler geliştiren kendi türündeki ilk tesisti. Bell Laboratuvarlarında tamamlanan yedi esere Nobel Ödülü verilmiştir.
1937, Clinton J. Davisson "Deneysel olarak elektronların kristaller tarafından kırınımlarını" bulmasından dolayı George Paget Thomson ile Nobel Fizik Ödülünü paylaştı.
1956, John Bardeen, Walter H. Brattain, ve William Shockley"Yarı iletkenlere dair çalışmalarından ve transistör etkisini keşfinden dolayı" Nobel Fizik Ödülünü aldılar.
1977, Philip W. Anderson "Manyetik düzensiz sistemlerin elektronik yapısına dair temel teorik araştırmalarından dolayı" Nobel Fizik ödülünü Nevill Francis Mott ve John Hasbrouck Van Vleck ile paylaştı.
1978, Arno A. Penzias ve Robert W. Wilson "Kozmik mikrodalga arka plan ışımasını bulmalarından dolayı" Nobel Fizik Ödülünü aldılar.
1997, Steven Chu "Laser ışığıyla atomların soğutulması ve yakalanması için bir method geliştirdiğinden dolayı" Nobel Fizik Ödülünü Claude Cohen-Tannoudji ve William Daniel Phillips ile paylaştı.
1998, Horst Stormer, Robert Laughlin, ve Daniel Tsui çok küçük kuantum koridor etkisini bulmaları ve açıklamaları nedeniyle Nobel Fizik Ödülünü aldılar.
2009, Willard Boyle ve George E. Smith yarı iletken görüntüleme devresi (CCD sensörü) icat etmelerinden dolayı Nobel Fizik Ödülünü Charles K. Kao ile paylaştılar.-
-
-
-
-
Apache
Apache nedir
Apache is the most widely used web server software. Developed and maintained by Apache Software Foundation, Apache is an open source software available for free. It runs on 67% of all webservers in the world. It is fast, reliable, and secure. It can be highly customized to meet the needs of many different environments by using extensions and modules. Most WordPress hosting providers use Apache as their web server software. However, WordPress can run on other web server software as well.
Apache açık kaynak kodlu, güçlü, sağlam, yetenekli ve esnek bir http (web) sunucusudur. Apache Software Foundation (ASF) tarafından geliştirilir. ASF, Apache yazarları tarafından 1999’da yazılım için yasal bir şemsiye olması için oluşturulmuştur. Açık kaynak kodlu bir yazılımdır, lisansı ücretsizdir. Yazılım firmaları, kurumlara verdikleri hizmetten (kurulum, teknik destek, vb) kazanç sağlarlar.
Internetteki web sitelerinin %60’ı Apache üzerinde çalışmaktadır. Apache, en yakın rakibi Microsoft’un web sunucularının 3 katı pazar payına sahiptir.

Apache’yi Kim Kullanıyor?

Web siteleri Apache üzerinde çalışan farklı sektörlerden birkaç kurum:

Cumhurbaşkanlığı
Turkcell
Migros
Garanti Bankası
Sabah Gazetesi
Sabancı Üniversitesi
Orta Doğu Teknik Üniversitesi
AGB Anadolu Ajansı
Türkiye Odalar ve Borsalar Birliği
İstanbul Menkul Kıymetler Borsası
Oracle
Mercedes-Benz
Ericsson
Amazon
-
-
Apache Hadoop	(GITHUB)  (test) 
Hadoop nedir, apache hadoop nedir
Apache Hadoop is a collection of open-source software utilities that facilitate using a network of many computers to solve problems involving massive amounts of data and computation. It provides a software framework for distributed storage and processing of big data using the MapReduce programming model. Originally designed for computer clusters built from commodity hardware[3]—still the common use—it has also found use on clusters of higher-end hardware. All the modules in Hadoop are designed with a fundamental assumption that hardware failures are common occurrences and should be automatically handled by the framework.
-
-
-
-
Apache Hive     	(GITHUB) (test)
apache hive nedir, hive nedir
Apache Hive is a data warehouse software project built on top of Apache Hadoop for providing data query and analysis.[3] Hive gives an SQL-like interface to query data stored in various databases and file systems that integrate with Hadoop. Traditional SQL queries must be implemented in the MapReduce Java API to execute SQL applications and queries over distributed data. Hive provides the necessary SQL abstraction to integrate SQL-like queries (HiveQL) into the underlying Java without the need to implement queries in the low-level Java API. Since most data warehousing applications work with SQL-based querying languages, Hive aids portability of SQL-based applications to Hadoop.[4] While initially developed by Facebook, Apache Hive is used and developed by other companies such as Netflix and the Financial Industry Regulatory Authority (FINRA).[5][6] Amazon maintains a software fork of Apache Hive included in Amazon Elastic MapReduce on Amazon Web Services.[7]
-
-
-
Apache Impala     	(GITHUB) (test)
apache Impala nedir, apache impala nedir, impala nedir
What is Impala?
Impala is a MPP (Massive Parallel Processing) SQL query engine for processing huge volumes of data that is stored in Hadoop cluster. It is an open source software which is written in C++ and Java. It provides high performance and low latency compared to other SQL engines for Hadoop.
In other words, Impala is the highest performing SQL engine (giving RDBMS-like experience) which provides the fastest way to access data that is stored in Hadoop Distributed File System.
Why Impala?
Impala combines the SQL support and multi-user performance of a traditional analytic database with the scalability and flexibility of Apache Hadoop, by utilizing standard components such as HDFS, HBase, Metastore, YARN, and Sentry.
•	With Impala, users can communicate with HDFS or HBase using SQL queries in a faster way compared to other SQL engines like Hive.
•	Impala can read almost all the file formats such as Parquet, Avro, RCFile used by Hadoop.
Impala uses the same metadata, SQL syntax (Hive SQL), ODBC driver, and user interface (Hue Beeswax) as Apache Hive, providing a familiar and unified platform for batch-oriented or real-time queries.
Unlike Apache Hive, Impala is not based on MapReduce algorithms. It implements a distributed architecture based on daemon processes that are responsible for all the aspects of query execution that run on the same machines.
Thus, it reduces the latency of utilizing MapReduce and this makes Impala faster than Apache Hive.
Advantages of Impala
Here is a list of some noted advantages of Cloudera Impala.
•	Using impala, you can process data that is stored in HDFS at lightning-fast speed with traditional SQL knowledge.
•	Since the data processing is carried where the data resides (on Hadoop cluster), data transformation and data movement is not required for data stored on Hadoop, while working with Impala.
•	Using Impala, you can access the data that is stored in HDFS, HBase, and Amazon s3 without the knowledge of Java (MapReduce jobs). You can access them with a basic idea of SQL queries.
•	To write queries in business tools, the data has to be gone through a complicated extract-transform-load (ETL) cycle. But, with Impala, this procedure is shortened. The time-consuming stages of loading & reorganizing is overcome with the new techniques such as exploratory data analysis & data discovery making the process faster.
•	Impala is pioneering the use of the Parquet file format, a columnar storage layout that is optimized for large-scale queries typical in data warehouse scenarios.
Features of Impala
Given below are the features of cloudera Impala −
•	Impala is available freely as open source under the Apache license.
•	Impala supports in-memory data processing, i.e., it accesses/analyzes data that is stored on Hadoop data nodes without data movement.
•	You can access data using Impala using SQL-like queries.
•	Impala provides faster access for the data in HDFS when compared to other SQL engines.
•	Using Impala, you can store data in storage systems like HDFS, Apache HBase, and Amazon s3.
•	You can integrate Impala with business intelligence tools like Tableau, Pentaho, Micro strategy, and Zoom data.
•	Impala supports various file formats such as, LZO, Sequence File, Avro, RCFile, and Parquet.
•	Impala uses metadata, ODBC driver, and SQL syntax from Apache Hive.
Relational Databases and Impala
Impala uses a Query language that is similar to SQL and HiveQL. The following table describes some of the key dfferences between SQL and Impala Query language.
Impala	Relational databases
Impala uses an SQL like query language that is similar to HiveQL.	Relational databases use SQL language.
In Impala, you cannot update or delete individual records.	In relational databases, it is possible to update or delete individual records.
Impala does not support transactions.	Relational databases support transactions.
Impala does not support indexing.	Relational databases support indexing.
Impala stores and manages large amounts of data (petabytes).	Relational databases handle smaller amounts of data (terabytes) when compared to Impala.
-
-
-
Apache Nutch	(GITHUB)  (test) 
Apache Nutch nedir
Apache Nutch is a highly extensible and scalable open source web crawler software project. Stemming from Apache Lucene, the project has diversified and now comprises two codebases, namely:
Nutch 1.x: A well matured, production ready crawler. 1.x enables fine grained configuration, relying on Apache Hadoop data structures, which are great for batch processing.
Nutch 2.x: An emerging alternative taking direct inspiration from 1.x, but which differs in one key area; storage is abstracted away from any specific underlying data store by using Apache Gora for handling object to persistent mappings. This means we can implement an extremely flexibile model/stack for storing everything (fetch time, status, content, parsed text, outlinks, inlinks, etc.) into a number of NoSQL storage solutions.
Being pluggable and modular of course has it's benefits, Nutch provides extensible interfaces such as Parse, Index and ScoringFilter's for custom implementations e.g. Apache Tika for parsing. Additionally, pluggable indexing exists for Apache Solr, Elastic Search, etc.
-
Apache Solr   (GITHUB)  (test)
apache solr nedir, solr nedir
Solr is highly reliable, scalable and fault tolerant, providing distributed indexing, replication and load-balanced querying, automated failover and recovery, centralized configuration and more. Solr powers the search and navigation features of many of the world's largest internet sites.
Solr (pronounced "solar") is an open-source enterprise-search platform, written in Java, from the Apache Lucene project. Its major features include full-text search, hit highlighting, faceted search, real-time indexing, dynamic clustering, database integration, NoSQL features[2] and rich document (e.g., Word, PDF) handling. Providing distributed search and index replication, Solr is designed for scalability and fault tolerance.[3] Solr is widely used for enterprise search and analytics use cases and has an active development community and regular releases.
Solr runs as a standalone full-text search server. It uses the Lucene Java search library at its core for full-text indexing and search, and has REST-like HTTP/XML and JSON APIs that make it usable from most popular programming languages. Solr's external configuration allows it to be tailored to many types of applications without Java coding, and it has a plugin architecture to support more advanced customization.
Apache Lucene and Apache Solr are both produced by the same Apache Software Foundation development team.
-
-
-
Apache Spark     	(GITHUB) (test)
apache spark nedir, spark nedir
Apache Spark is an open-source distributed general-purpose cluster-computing framework. Spark provides an interface for programming entire clusters with implicit data parallelism and fault tolerance. Originally developed at the University of California, Berkeley's AMPLab, the Spark codebase was later donated to the Apache Software Foundation, which has maintained it since.

Overview
Apache Spark has its architectural foundation in the Resilient Distributed Dataset (RDD), a read-only multiset of data items distributed over a cluster of machines, that is maintained in a fault-tolerant way.[2] The Dataframe API was released as an abstraction on top of the RDD, followed by the Dataset API. In Spark 1.x, the RDD was the primary application programming interface (API), but as of Spark 2.x use of the Dataset API is encouraged[3] even though the RDD API is not deprecated.[4][5] The RDD technology still underlies the Dataset API.[6][7]
Spark and its RDDs were developed in 2012 in response to limitations in the MapReduce cluster computing paradigm, which forces a particular linear dataflow structure on distributed programs: MapReduce programs read input data from disk, map a function across the data, reduce the results of the map, and store reduction results on disk. Spark's RDDs function as a working set for distributed programs that offers a (deliberately) restricted form of distributed shared memory.[8]
-
-
Metadata 	(GITHUB)  (read)
metadata nedir
Metadata is simply data about data. It means it is a description and context of the data. It helps to organize, find and understand data. Here are a few real world examples of metadata:
Those are some typical metadata elements:
1.	Title and description,
2.	Tags and categories,
3.	Who created and when,
4.	Who last modified and when,
5.	Who can access or update.
Every time you take a photo with today's cameras a bunch of metadata is gathered and saved with it:
•	date and time,
•	filename,
•	camera settings,
•	geolocation.
-
-
Redux  (GITHUB)  (test) 
Redux nedir
https://www.smashingmagazine.com/2018/07/redux-designers-guide/

Let’s say we are building a Dribbble shot page. What is the data we want to display on the page? They include the author’s profile photo, name, the animated GIF, the number of hearts, the comments, and so on.
 
Data on a Dribbble shot page (Large preview)
First, we need to fetch all these data from a server in the cloud and put it somewhere. Next, we need to actually display the data. We need to assign pieces of this data to corresponding UI elements that represent what we actually see in the browser. For example, we assign the URL of the profile photo to the src attribute of an HTML img tag:
<img src='https://url/to/profile_photo'>
Copy
Finally, we need to handle changes to the data. For example, if a user adds a new comment to a Dribbble shot, or adds a star, we need to update the HTML accordingly.
Coordinating these three aspects of state is a big part in front-end development, and React has various degree of support for this task. Sometimes the built-in facility in React works well enough. But as the app grows more complex, its state may become harder to manage with React alone. That’s why many people start using Redux as an alternative.
-
-
Apache Pig     	(GITHUB) (test)
pig nedir, apache pig nedir
Apache Pig[1] is a high-level platform for creating programs that run on Apache Hadoop. The language for this platform is called Pig Latin.[1] Pig can execute its Hadoop jobs in MapReduce, Apache Tez, or Apache Spark.[2] Pig Latin abstracts the programming from the Java MapReduce idiom into a notation which makes MapReduce programming high level, similar to that of SQL for relational database management systems. Pig Latin can be extended using user-defined functions (UDFs) which the user can write in Java, Python, JavaScript, Ruby or Groovy[3] and then call directly from the language.
-
-
In mathematics, a tuple is a finite ordered list (sequence) of elements. An n-tuple is a sequence (or ordered list) of n elements, where n is a non-negative integer. There is only one 0-tuple, referred to as the empty tuple. An n-tuple is defined inductively using the construction of an ordered pair.

In mathematics, a tuple is a finite ordered list (sequence) of elements. An n-tuple is a sequence (or ordered list) of n elements, where n is a non-negative integer. There is only one 0-tuple, referred to as the empty tuple. An n-tuple is defined inductively using the construction of an ordered pair.
Mathematicians usually write tuples by listing the elements within parentheses "( )" and separated by commas; for example, (2, 7, 4, 1, 7) denotes a 5-tuple. Sometimes other symbols are used to surround the elements, such as square brackets "[ ]" or angle brackets "⟨ ⟩". Braces "{ }" are only used in defining arrays in some programming languages but not in mathematical expressions, as they are the standard notation for sets. The term tuple can often occur when discussing other mathematical objects, such as vectors.
In computer science, tuples come in many forms. Most typed functional programming languages implement tuples directly as product types,[1] tightly associated with algebraic data types, pattern matching, and destructuring assignment.[2] Many programming languages offer an alternative to tuples, known as record types, featuring unordered elements accessed by label.[3] A few programming languages combine ordered tuple product types and unordered record types into a single construct, as in C structs and Haskell records. Relational databases may formally identify their rows (records) as tuples.
Tuples also occur in relational algebra; when programming the semantic web with the Resource Description Framework (RDF); in linguistics;[4] and in philosophy.[5]
-
-
C# 
(double, int) t1 = (4.5, 3);
Console.WriteLine($"Tuple with elements {t1.Item1} and {t1.Item2}.");
// Output:
// Tuple with elements 4.5 and 3.

(double Sum, int Count) t2 = (4.5, 3);
Console.WriteLine($"Sum of {t2.Count} elements is {t2.Sum}.");
// Output:
// Sum of 3 elements is 4.5.
As the preceding example shows, to define a tuple type, you specify types of all its data members and, optionally, the field names. You cannot define methods in a tuple type, but you can use the methods provided by .NET, as the following example shows:
C#Kopyala
Çalıştır
(double, int) t = (4.5, 3);
Console.WriteLine(t.ToString());
Console.WriteLine($"Hash code of {t} is {t.GetHashCode()}.");
// Output:
// (4.5, 3)
// Hash code of (4.5, 3) is 718460086.
Beginning with C# 7.3, tuple types support equality operators == and !=. For more information, see the Tuple equality section.
Tuple types are value types; tuple elements are public fields. That makes tuples mutable value types.
 Not
The tuples feature requires the System.ValueTuple type and related generic types (for example, System.ValueTuple<T1,T2>), which are available in .NET Core and .NET Framework 4.7 and later. To use tuples in a project that targets .NET Framework 4.6.2 or earlier, add the NuGet package System.ValueTuple to the project.
You can define tuples with an arbitrary large number of elements:
C#Kopyala
Çalıştır
var t = 
(1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
11, 12, 13, 14, 15, 16, 17, 18,
19, 20, 21, 22, 23, 24, 25, 26);
Console.WriteLine(t.Item26);  // output: 26
Use cases of tuples
One of the most common use cases of tuples is as a method return type. That is, instead of defining out method parameters, you can group method results in a tuple return type, as the following example shows:
C#Kopyala
Çalıştır
var xs = new[] { 4, 7, 9 };
var limits = FindMinMax(xs);
Console.WriteLine($"Limits of [{string.Join(" ", xs)}] are {limits.min} and {limits.max}");
// Output:
// Limits of [4 7 9] are 4 and 9

var ys = new[] { -9, 0, 67, 100 };
var (minimum, maximum) = FindMinMax(ys);
Console.WriteLine($"Limits of [{string.Join(" ", ys)}] are {minimum} and {maximum}");
// Output:
// Limits of [-9 0 67 100] are -9 and 100

(int min, int max) FindMinMax(int[] input)
{
    if (input is null || input.Length == 0)
    {
        throw new ArgumentException("Cannot find minimum and maximum of a null or empty array.");
    }

    var min = int.MaxValue;
    var max = int.MinValue;
    foreach (var i in input)
    {
        if (i < min)
        {
            min = i;
        }
        if (i > max)
        {
            max = i;
        }
    }
    return (min, max);
}
As the preceding example shows, you can work with the returned tuple instance directly or deconstruct it in separate variables.
You can also use tuple types instead of anonymous types; for example, in LINQ queries. For more information, see Choosing between anonymous and tuple types.
Typically, you use tuples to group loosely related data elements. That is usually useful within private and internal utility methods. In the case of public API, consider defining a class or a structure type.
Tuple field names
You can explicitly specify the names of tuple fields either in a tuple initialization expression or in the definition of a tuple type, as the following example shows:
C#Kopyala
Çalıştır
var t = (Sum: 4.5, Count: 3);
Console.WriteLine($"Sum of {t.Count} elements is {t.Sum}.");

(double Sum, int Count) d = (4.5, 3);
Console.WriteLine($"Sum of {d.Count} elements is {d.Sum}.");
Beginning with C# 7.1, if you don't specify a field name, it may be inferred from the name of the corresponding variable in a tuple initialization expression, as the following example shows:
C#Kopyala
Çalıştır
var sum = 4.5;
var count = 3;
var t = (sum, count);
Console.WriteLine($"Sum of {t.count} elements is {t.sum}.");
That's known as tuple projection initializers. The name of a variable isn't projected onto a tuple field name in the following cases:
•	The candidate name is a member name of a tuple type, for example, Item3, ToString, or Rest.
•	The candidate name is a duplicate of another tuple field name, either explicit or implicit.
In those cases you either explicitly specify the name of a field or access a field by its default name.
The default names of tuple fields are Item1, Item2, Item3 and so on. You can always use the default name of a field, even when a field name is specified explicitly or inferred, as the following example shows:
C#Kopyala
Çalıştır
var a = 1;
var t = (a, b: 2, 3);
Console.WriteLine($"The 1st element is {t.Item1} (same as {t.a}).");
Console.WriteLine($"The 2nd element is {t.Item2} (same as {t.b}).");
Console.WriteLine($"The 3rd element is {t.Item3}.");
// Output:
// The 1st element is 1 (same as 1).
// The 2nd element is 2 (same as 2).
// The 3rd element is 3.
Tuple assignment and tuple equality comparisons don't take field names into account.
At compile time, the compiler replaces non-default field names with the corresponding default names. As a result, explicitly specified or inferred field names aren't available at run time.
Tuple assignment and deconstruction
C# supports assignment between tuple types that satisfy both of the following conditions:
•	both tuple types have the same number of elements
•	for each tuple position, the type of the right-hand tuple element is the same as or implicitly convertible to the type of the corresponding left-hand tuple element
Tuple element values are assigned following the order of tuple elements. The names of tuple fields are ignored and not assigned, as the following example shows:
C#Kopyala
Çalıştır
(int, double) t1 = (17, 3.14);
(double First, double Second) t2 = (0.0, 1.0);
t2 = t1;
Console.WriteLine($"{nameof(t2)}: {t2.First} and {t2.Second}");
// Output:
// t2: 17 and 3.14

(double A, double B) t3 = (2.0, 3.0);
t3 = t2;
Console.WriteLine($"{nameof(t3)}: {t3.A} and {t3.B}");
// Output:
// t3: 17 and 3.14
You can also use the assignment operator = to deconstruct a tuple instance in separate variables. You can do that in one of the following ways:
•	Explicitly declare the type of each variable inside parentheses:
C#Kopyala
Çalıştır
var t = ("post office", 3.6);
(string destination, double distance) = t;
Console.WriteLine($"Distance to {destination} is {distance} kilometers.");
// Output:
// Distance to post office is 3.6 kilometers.
•	Use the var keyword outside the parentheses to declare implicitly typed variables and let the compiler infer their types:
C#Kopyala
Çalıştır
var t = ("post office", 3.6);
var (destination, distance) = t;
Console.WriteLine($"Distance to {destination} is {distance} kilometers.");
// Output:
// Distance to post office is 3.6 kilometers.
•	Use existing variables:
C#Kopyala
Çalıştır
var destination = string.Empty;
var distance = 0.0;

var t = ("post office", 3.6);
(destination, distance) = t;
Console.WriteLine($"Distance to {destination} is {distance} kilometers.");
// Output:
// Distance to post office is 3.6 kilometers.
For more information about deconstruction of tuples and other types, see Deconstructing tuples and other types.
Tuple equality
Beginning with C# 7.3, tuple types support the == and != operators. These operators compare members of the left-hand operand with the corresponding members of the right-hand operand following the order of tuple elements.
C#Kopyala
Çalıştır
(int a, byte b) left = (5, 10);
(long a, int b) right = (5, 10);
Console.WriteLine(left == right);  // output: True
Console.WriteLine(left != right);  // output: False

var t1 = (A: 5, B: 10);
var t2 = (B: 5, A: 10);
Console.WriteLine(t1 == t2);  // output: True
Console.WriteLine(t1 != t2);  // output: False
As the preceding example shows, the == and != operations don't take into account tuple field names.
Two tuples are comparable when both of the following conditions are satisfied:
•	Both tuples have the same number of elements. For example, t1 != t2 doesn't compile if t1 and t2 have different numbers of elements.
•	For each tuple position, the corresponding elements from the left-hand and right-hand tuple operands are comparable with the == and != operators. For example, (1, (2, 3)) == ((1, 2), 3) doesn't compile because 1 is not comparable with (1, 2).
The == and != operators compare tuples in short-circuiting way. That is, an operation stops as soon as it meets a pair of non equal elements or reaches the ends of tuples. However, before any comparison, all tuple elements are evaluated, as the following example shows:
C#Kopyala
Çalıştır
Console.WriteLine((Display(1), Display(2)) == (Display(3), Display(4)));

int Display(int s)
{
    Console.WriteLine(s);
    return s;
}
// Output:
// 1
// 2
// 3
// 4
// False
Tuples as out parameters
Typically, you refactor a method that has out parameters into a method that returns a tuple. However, there are cases in which an out parameter can be of a tuple type. The following example shows how to work with tuples as out parameters:
C#Kopyala
Çalıştır
var limitsLookup = new Dictionary<int, (int Min, int Max)>()
{
    [2] = (4, 10),
    [4] = (10, 20),
    [6] = (0, 23)
};

if (limitsLookup.TryGetValue(4, out (int Min, int Max) limits))
{
    Console.WriteLine($"Found limits: min is {limits.Min}, max is {limits.Max}");
}
// Output:
// Found limits: min is 10, max is 20
Tuples vs System.Tuple
C# tuples, which are backed by System.ValueTuple types, are different from tuples that are represented by System.Tuple types. The main differences are as follows:
•	ValueTuple types are value types. Tuple types are reference types.
•	ValueTuple types are mutable. Tuple types are immutable.
•	Data members of ValueTuple types are fields. Data members of Tuple types are properties.
-
-
-
-
HTML (HyperText Markup Language)             (GITHUB)  (test) 
Html nedir
Html web sayfaları hazırlamak için kullanılan bir işaretleme dilidir. Halihazırda kullandığımız web tarayıcıları (Internet Explorer, Firefox, Chrome v.b) bu kodları anlayarak görsel web sayfalarına dönüştürürler. Html bir programlama dili değildir.
Hypertext Markup Language (HTML) is the standard markup language for documents designed to be displayed in a web browser. It can be assisted by technologies such as Cascading Style Sheets (CSS) and scripting languages such as JavaScript.
Web browsers receive HTML documents from a web server or from local storage and render the documents into multimedia web pages. HTML describes the structure of a web page semantically and originally included cues for the appearance of the document.
HTML elements are the building blocks of HTML pages. With HTML constructs, images and other objects such as interactive forms may be embedded into the rendered page. HTML provides a means to create structured documents by denoting structural semantics for text such as headings, paragraphs, lists, links, quotes and other items. HTML elements are delineated by tags, written using angle brackets. Tags such as <img /> and <input /> directly introduce content into the page. Other tags such as <p> surround and provide information about document text and may include other tags as sub-elements. Browsers do not display the HTML tags, but use them to interpret the content of the page.
HTML can embed programs written in a scripting language such as JavaScript, which affects the behavior and content of web pages. Inclusion of CSS defines the look and layout of content. The World Wide Web Consortium (W3C), former maintainer of the HTML and current maintainer of the CSS standards, has encouraged the use of CSS over explicit presentational HTML since 1997. 
-
-
UNIX		(GITHUB)
Unix nedir
Unix (/ˈjuːnɪks/; trademarked as UNIX) is a family of multitasking, multiuser computer operating systems that derive from the original AT&T Unix, development starting in the 1970s at the Bell Labs research center by Ken Thompson, Dennis Ritchie, and others.[3]
-Unix vs linux yazılar var: https://chandigarhinfo.in/unix-vs-linux-whats-the-difference/
-
UNIX türevi işletim sistemleri çok işlemcili çok pahalı makinalardan, tek işlemcili basit ve çok ucuz ev bilgisayarlarına kadar pek çok cihaz üzerinde çalışabilen esnek ve sağlamlığı çok değişik koşullarda test edilmiş sistemlerdir. Fakat özellikle kararlı yapısı ve çok kullanıcılı-çok görevli yapısıyla çok işlemcili sunucularda adeta standard haline gelmiştir ve özellikle akademik dünyada iş istasyonları üzerinde çok yaygın bir kullanım alanı bulmuştur. UNIX, Interdata 7/32, VAX, ve Motorola 68000 arasında hızla yayıldı.
Unix işletim sistemi 1969 yılında AT&T Bell Laboratuvarları'nda ABD de Ken Thompson, Dennis Ritchie, Brian Kernighan, Douglas McIlroy, Michael Lesk ve Joe Ossanna tarafından tasarlanıp uygulamaya konmuştur.İlk olarak 1971'de yayınlandı ve başlangıçta tamamen bilgisayar programlarının yazılmasında kullanılan alt seviyeli bir çevirme dilinde yazılmıştı. Daha sonra 1973'te Dennis Ritche tarafından C programlama dili ile tekrar yazıldı. Üst düzey bir dilde yazılmış bir işletim sisteminin geçerliliği diğer farklı bilgisayar platformlarına kolayca taşınabilirlik için olanak sağlar. Lisans için AT&T'yi zorlayan yasal bir aksaklık nedeniyle, UNIX hızlıca büyüdü ve öğretim kurumları ve işletmeler tarafından kabul edilir oldu.
UNIX, 1969 yılında,Ken Thompson, Dennis Ritchie, Brian Kernighan, Douglas McIlroy, Michael Lesk ve Joe Ossanna tarafından Bell Laboratuvarları'nda geliştirilmiş, çok kullanıcılı (multiuser), çok görevli yapıyı destekleyen (multitasking) bir bilgisayar işletim sistemidir. Komut yorumlayıcı yazılımlar (shell) aracılığı ile kullanıcı ve bilgisayar sisteminin iletişimi sağlanır.
Linus Torvalds tarafından temelleri atılan Linux, UNIX olmayıp bir UNIX türevidir. UNIX'ten ilham alan, bir grup bağımsız yazılımcı tarafından geliştirilen bir işletim sistemi çekirdeğidir. 
-
-
-
-
Linux 		(GITHUB)
Linux nedir

The name “Linux” comes from the Linux kernel. It is the software on a computer that allows applications and users to access the devices on the computer to perform certain specific functions.
Bilgisayar işletim sistemlerinin en temel parçası olan çekirdek yazılımlarından bir tanesidir.verilmiştir.[1]Günümüzde süper bilgisayarlarda, akıllı cihazların ve internet altyapısında kullanılan cihazların işletim sistemlerinde yaygın olarak kullanılmaktadır. Bunlardan en popüler olanı Google tarafından geliştirilen Android işletim sistemidir.
Android, Linux çekirdeği üzerine inşa edilmiş bir mobil işletim sistemidir.
Android işletim sistemi beş kısımdan oluşur.
1.	Çekirdek: Linux kernelidir. Güvenlik, hafıza yönetimi, süreç yönetimi, ağ yığınları ve sürücü modellerini içermektedir.
2.	Android Runtime: Sanal makinedir. Dalvik Sanal Makinesini de içermektedir. 5.0 ile Dalvik kaldırılmış ve ART'ye geçilmiştir.
3.	Kütüphaneler: Veritabanı kütüphaneleri, web tarayıcı kütüphaneleri, grafik ve arayüz kütüphanelerini içermektedir.
4.	Uygulama Çatısı: Uygulama geliştiricilere geniş bir platform sunan kısımdır.
5.	Uygulama Katmanı: Doğrudan Java (programlama dili) ile geliştirilmiş uygulamaları içermektedir.
-
-
-
-
-
-
-
-
-
UNIX vs. LINUX		(bosch)	 (bosch)
unix nedir, linux nedir, UNIX nedir
The UNIX is a multiuser computer operating systems was born in the late 1960s. AT & T Bell Labs released an OS called Unix written in C, which allows for faster modification, portability and acceptance. It began as a one-man project led by Ken Thompson of Bell Labs. It became the most widely used operating system. Unix is a proprietary operating system.
Unix OS works on CLI (Command Line Interface), but recently it has been developed for GUI on Unix systems. Unix is an operating system that is popular in companies, universities, large companies, etc
What is LINUX? 
Linux is an operating system built by Linus Torvalds at the University of Helsinki in 1991. The name “Linux” comes from the Linux kernel. It is the software on a computer that allows applications and users to access the devices on the computer to perform certain specific functions.
Linux OS forwards instructions from an application from the computer processor and sends the results back to the application via Linux OS. It can be installed on another type of computers, mobile phones, tablets, video game consoles, etc.
The development of Linux is one of the most prominent examples of collaboration with free and open source. Today, many companies and similar individuals have released their own version of the OS based on the Linux kernel.
 
 
 
Features of Unix OS
	Multitasking and Multi-user operating system
	It can be used as a master control program in servers and  workstations.
	Hundreds of commercial applications available
	In its day, UNIX was rapidly adopted and became the standard OS in universities.
if you are learn more about linux then Join CBitss Technologies. CBitss Provides Best Linux Training in Chandigarh Sector 34A. More details Call Now –  (+91) 9988741983
Features of Linux Operating System
	Support multitasking
	Programs consist of one or more processes, and each process has one or more threads
	It can easily co-exists along with other Operating systems.
	It can run multiple user programs
	Individual accounts are protected because of appropriate authorization
	Linux is a copy of UNIX but does not use its code
Difference between Unix and Linux
Cost 
	 Linux is freely distributed, downloaded via newspapers, books, websites, etc. There are also paid versions available for Linux.
	Unix – Different flavors of Unix have different prices depending on the supplier type
Development
	Linux is Open Source and thousands of programmers collaborate online and contribute to its development
	Unix systems have different versions. These versions are mainly developed by AT&T and other commercial suppliers
User
	Linux – All. From home users to both developers and computer enthusiasts.
	UNIX can be used on Internet servers, workstations, and computers
Text made interface
	BASH is the Linux shell. It offers support for several command interpreters
	Unix Originally build up to work in Bourne Shell. But it is now compatible with much other software.
GUI
	Linux has two GUIs, KDE and Gnome. Although there are many options like Mate, LXDE, Xfce, etc.
	Unix – Shared desktop environment and also has Gnome.
Viruses
	Linux has had about 60-100 viruses so far listed that are not currently spreading.
	There are between 80 and 120 viruses reported to date in Unix.
Threat detection
	Threat detection and resolution are very fast as Linux is mainly community-driven. So if any Linux user publishes some kind of threat, a team of qualified developers will start working to resolve this threat
	Unix users require longer waiting times to get the correct fix
Architectures
	Linux – Originally developed for Intel x86 hardware processors. It is available for over 20 different types of CPU, which also includes an ARM
	Unix – It is available on PA-RISC and Itanium machines
Usage
	Linux OS can be installed on different types of devices such as mobile, tablets
	The UNIX operating system is used for Internet servers, workstations, and computers
Best feature
	Linux – Kernel update without a reboot
	Unix – Feta ZFS – next-generation DTrace file system – dynamic kernel tracking
Versions
	Various versions of Linux are Redhat, Ubuntu, OpenSuse, Solaris etc
	Different versions of Unix are AIS, BSD, HP-UX, etc.
Supported file type
	File system supported by file type such as xfs, nfs, cramfsm ext 1 to 4, ufs, devpts, NTFS
	The file systems supported by file types are zfs, hfx, GPS, xfs, vxfs
Portability
	Linux is portable and is booted from a USB Stick
	Unix is not portable
Source Code
	Linux – The source is available to the general public
	Unix – The source code is not available to anyone
Limitation of Linux
	There’s no standard edition of Linux
	Linux has patchier support for drivers that can cause system-wide errors.
	Linux, at least for new users, is not as easy to use as Windows.
	Many of the programs we use for Windows will only run on Linux using a complicated emulator. For example. Microsoft Office
	Linux is best suitable for a corporate user. It’s much harder to introduce in a home setting.
Limitations of Unix
	The unfriendly, terse, inconsistent, and non-mnemonic user interface
	Unix Operating system is designed for a slow computer system, so you can’t expect fast performance.
	The Shell interface can be treacherous because typos can destroy files.
	Versions on different machines are slightly different, so it lacks consistency.
	Unix does not provide a secure response time for hardware failure, so it does not support real-time response systems.
-
-
-
UNIX		(bosch)	 (bosch)
unix nedir
UNIX türevi işletim sistemleri çok işlemcili çok pahalı makinalardan, tek işlemcili basit ve çok ucuz ev bilgisayarlarına kadar pek çok cihaz üzerinde çalışabilen esnek ve sağlamlığı çok değişik koşullarda test edilmiş sistemlerdir. Fakat özellikle kararlı yapısı ve çok kullanıcılı-çok görevli yapısıyla çok işlemcili sunucularda adeta standard haline gelmiştir ve özellikle akademik dünyada iş istasyonları üzerinde çok yaygın bir kullanım alanı bulmuştur. UNIX, Interdata 7/32, VAX, ve Motorola 68000 arasında hızla yayıldı.
Unix işletim sistemi 1969 yılında AT&T Bell Laboratuvarları'nda ABD de Ken Thompson, Dennis Ritchie, Brian Kernighan, Douglas McIlroy, Michael Lesk ve Joe Ossanna tarafından tasarlanıp uygulamaya konmuştur.İlk olarak 1971'de yayınlandı ve başlangıçta tamamen bilgisayar programlarının yazılmasında kullanılan alt seviyeli bir çevirme dilinde yazılmıştı. Daha sonra 1973'te Dennis Ritche tarafından C programlama dili ile tekrar yazıldı. Üst düzey bir dilde yazılmış bir işletim sisteminin geçerliliği diğer farklı bilgisayar platformlarına kolayca taşınabilirlik için olanak sağlar. Lisans için AT&T'yi zorlayan yasal bir aksaklık nedeniyle, UNIX hızlıca büyüdü ve öğretim kurumları ve işletmeler tarafından kabul edilir oldu.
UNIX, 1969 yılında,Ken Thompson, Dennis Ritchie, Brian Kernighan, Douglas McIlroy, Michael Lesk ve Joe Ossanna tarafından Bell Laboratuvarları'nda geliştirilmiş, çok kullanıcılı (multiuser), çok görevli yapıyı destekleyen (multitasking) bir bilgisayar işletim sistemidir. Komut yorumlayıcı yazılımlar (shell) aracılığı ile kullanıcı ve bilgisayar sisteminin iletişimi sağlanır.
Linus Torvalds tarafından temelleri atılan Linux, UNIX olmayıp bir UNIX türevidir. UNIX'ten ilham alan, bir grup bağımsız yazılımcı tarafından geliştirilen bir işletim sistemi çekirdeğidir. 
-
-
-
-
-
UNIX vs. LINUX		(bosch)	 (bosch)
unix nedir, linux nedir, UNIX nedir
The UNIX is a multiuser computer operating systems was born in the late 1960s. AT & T Bell Labs released an OS called Unix written in C, which allows for faster modification, portability and acceptance. It began as a one-man project led by Ken Thompson of Bell Labs. It became the most widely used operating system. Unix is a proprietary operating system.
Unix OS works on CLI (Command Line Interface), but recently it has been developed for GUI on Unix systems. Unix is an operating system that is popular in companies, universities, large companies, etc
What is LINUX? 
Linux is an operating system built by Linus Torvalds at the University of Helsinki in 1991. The name “Linux” comes from the Linux kernel. It is the software on a computer that allows applications and users to access the devices on the computer to perform certain specific functions.
Linux OS forwards instructions from an application from the computer processor and sends the results back to the application via Linux OS. It can be installed on another type of computers, mobile phones, tablets, video game consoles, etc.
The development of Linux is one of the most prominent examples of collaboration with free and open source. Today, many companies and similar individuals have released their own version of the OS based on the Linux kernel.
 
 
 
Features of Unix OS
	Multitasking and Multi-user operating system
	It can be used as a master control program in servers and  workstations.
	Hundreds of commercial applications available
	In its day, UNIX was rapidly adopted and became the standard OS in universities.
if you are learn more about linux then Join CBitss Technologies. CBitss Provides Best Linux Training in Chandigarh Sector 34A. More details Call Now –  (+91) 9988741983
Features of Linux Operating System
	Support multitasking
	Programs consist of one or more processes, and each process has one or more threads
	It can easily co-exists along with other Operating systems.
	It can run multiple user programs
	Individual accounts are protected because of appropriate authorization
	Linux is a copy of UNIX but does not use its code
Difference between Unix and Linux
Cost 
	 Linux is freely distributed, downloaded via newspapers, books, websites, etc. There are also paid versions available for Linux.
	Unix – Different flavors of Unix have different prices depending on the supplier type
Development
	Linux is Open Source and thousands of programmers collaborate online and contribute to its development
	Unix systems have different versions. These versions are mainly developed by AT&T and other commercial suppliers
User
	Linux – All. From home users to both developers and computer enthusiasts.
	UNIX can be used on Internet servers, workstations, and computers
Text made interface
	BASH is the Linux shell. It offers support for several command interpreters
	Unix Originally build up to work in Bourne Shell. But it is now compatible with much other software.
GUI
	Linux has two GUIs, KDE and Gnome. Although there are many options like Mate, LXDE, Xfce, etc.
	Unix – Shared desktop environment and also has Gnome.
Viruses
	Linux has had about 60-100 viruses so far listed that are not currently spreading.
	There are between 80 and 120 viruses reported to date in Unix.
Threat detection
	Threat detection and resolution are very fast as Linux is mainly community-driven. So if any Linux user publishes some kind of threat, a team of qualified developers will start working to resolve this threat
	Unix users require longer waiting times to get the correct fix
Architectures
	Linux – Originally developed for Intel x86 hardware processors. It is available for over 20 different types of CPU, which also includes an ARM
	Unix – It is available on PA-RISC and Itanium machines
Usage
	Linux OS can be installed on different types of devices such as mobile, tablets
	The UNIX operating system is used for Internet servers, workstations, and computers
Best feature
	Linux – Kernel update without a reboot
	Unix – Feta ZFS – next-generation DTrace file system – dynamic kernel tracking
Versions
	Various versions of Linux are Redhat, Ubuntu, OpenSuse, Solaris etc
	Different versions of Unix are AIS, BSD, HP-UX, etc.
Supported file type
	File system supported by file type such as xfs, nfs, cramfsm ext 1 to 4, ufs, devpts, NTFS
	The file systems supported by file types are zfs, hfx, GPS, xfs, vxfs
Portability
	Linux is portable and is booted from a USB Stick
	Unix is not portable
Source Code
	Linux – The source is available to the general public
	Unix – The source code is not available to anyone
Limitation of Linux
	There’s no standard edition of Linux
	Linux has patchier support for drivers that can cause system-wide errors.
	Linux, at least for new users, is not as easy to use as Windows.
	Many of the programs we use for Windows will only run on Linux using a complicated emulator. For example. Microsoft Office
	Linux is best suitable for a corporate user. It’s much harder to introduce in a home setting.
Limitations of Unix
	The unfriendly, terse, inconsistent, and non-mnemonic user interface
	Unix Operating system is designed for a slow computer system, so you can’t expect fast performance.
	The Shell interface can be treacherous because typos can destroy files.
	Versions on different machines are slightly different, so it lacks consistency.
	Unix does not provide a secure response time for hardware failure, so it does not support real-time response systems.
-
-
-
-






Smarty	(GITHUB)  (test)
Smarty nedir

Smarty is a template engine for PHP. More specifically, it facilitates a manageable way to separate application logic and content from its presentation. This is best described in a situation where the application programmer and the template designer play different roles, or in most cases are not the same person.
For example, let's say you are creating a web page that is displaying a newspaper article.
The article $headline, $tagline, $author and $body are content elements, they contain no information about how they will be presented. They are passed into Smarty by the application.
Then the template designer edits the templates and uses a combination of HTML tags and template tags to format the presentation of these variables with elements such as tables, div's, background colors, font sizes, style sheets, svg etc.
One day the programmer needs to change the way the article content is retrieved, ie a change in application logic. This change does not affect the template designer, the content will still arrive in the template exactly the same.
Likewise, if the template designer wants to completely redesign the templates, this would require no change to the application logic.
Therefore, the programmer can make changes to the application logic without the need to restructure templates, and the template designer can make changes to templates without breaking application logic.
One design goal of Smarty is the separation of business logic and presentation logic.
This means templates can certainly contain logic under the condition that it is for presentation only. Things such as including other templates, alternating table row colors, upper-casing a variable, looping over an array of data and displaying it are examples of presentation logic.
This does not mean however that Smarty forces a separation of business and presentation logic. Smarty has no knowledge of which is which, so placing business logic in the template is your own doing.
Also, if you desire no logic in your templates you certainly can do so by boiling the content down to text and variables only.

Some of Smarty's features:
It is extremely fast.
It is efficient since the PHP parser does the dirty work.
No template parsing overhead, only compiles once.
It is smart about recompiling only the template files that have changed.
You can easily create your own custom functions and variable modifiers, so the template language is extremely extensible.
Configurable template {delimiter} tag syntax, so you can use {$foo}, {{$foo}}, <!--{$foo}-->, etc.
The {if}..{elseif}..{else}..{/if} constructs are passed to the PHP parser, so the {if...} expression syntax can be as simple or as complex an evaluation as you like.
Allows unlimited nesting of sections, if's etc.
It is possible to embed PHP code right in your template files, although this may not be needed (nor recommended) since the engine is so customizable.
Built-in caching support
Arbitrary template sources
Custom cache handling functions
Plugin architecture
-
-
-
Ansible   	(empty)  (empty) 
[ansible nedir]
Renkler: yazı örnek yazı yazı örnek yazı yazı örnek yazı 
-
-
Ansible is an open-source software provisioning, configuration management, and application-deployment tool enabling infrastructure as code.[2] It runs on many Unix-like systems, and can configure both Unix-like systems as well as Microsoft Windows. It includes its own declarative language to describe system configuration. Ansible was written by Michael DeHaan and acquired by Red Hat in 2015. Ansible is agentless, temporarily connecting remotely via SSH or Windows Remote Management (allowing remote PowerShell execution) to do its tasks.
-
-
Fedora             (GITHUB)  (test) 
Fedora nedir
Bir işletim sistemidir. Fedora (önceki adıyla Fedora Core), açık kaynak kodlu ve özgür bir Linux dağıtımı. Dünya çapında bir özgür yazılım topluluğu olan Fedeora Projesi tarafından geliştirilmekte ve yönetilmekte, Red Hat tarafından desteklenmektedir.
Red Hat'ın 2004 yılında sonlandırdığı Red Hat Linux dağıtımının devamı olarak adlandırılabilecek Fedora, Linux dünyasının önde gelen dağıtımlarından biridir. Fedora aynı zamanda Red Hat Enterprise Linux ürünü için bir test ortamı görevi görmektedir.
-
Fedora is a Linux distribution developed by the community-supported Fedora Project which is sponsored primarily by Red Hat, a subsidiary of IBM, with additional support from other companies.[11] Fedora contains software distributed under various free and open-source licenses and aims to be on the leading edge of free technologies.[12][13][14] Fedora is the upstream source of the commercial Red Hat Enterprise Linux distribution, and subsequently CentOS as well.
Since the release of Fedora 30, five different editions are currently available: Workstation, focused on the personal computer, Server for servers, CoreOS, focused on cloud computing, Silverblue, focused on an immutable desktop specialized to container-based workflows and IoT, focused on IoT devices.
As of February 2016, Fedora has an estimated 1.2 million users,[17] including Linus Torvalds (as of 2015), creator of the Linux kernel.
Features
Fedora has a reputation for focusing on innovation, integrating new technologies early on and working closely with upstream Linux communities.[14][20] Making changes upstream instead of specifically for Fedora ensures that the changes are available to all Linux distributions.
Fedora has a relatively short life cycle: each version is usually supported for at least 13 months, where version X is supported only until 1 month after version X+2 is released and with approximately 6 months between most versions.[21] Fedora users can upgrade from version to version without reinstalling.
The default desktop environment in Fedora is GNOME and the default user interface is the GNOME Shell. Other desktop environments, including KDE Plasma, Xfce, LXDE, MATE, Deepin and Cinnamon, are available and can be installed.
-
-
-
WWW     	(GITHUB)  (empty) 
[www nedir, world wide web nedir]
Renkler: yazı örnek yazı yazı örnek yazı yazı örnek yazı 
-
-
World Wide Web, Dünya Çapında Ağ (kısaca WWW veya Web), İnternet üzerinde yayınlanan birbirleriyle bağlantılı hiper-metin dokümanlarından oluşan bir bilgi sistemidir. Bu dokümanların her birine Web sayfası adı verilir ve Web sayfalarına İnternet kullanıcısının bilgisayarında çalışan Web tarayıcısı adı verilen bilgisayar programları aracılığıyla erişilir. Web sayfalarında metin, imaj, video ve diğer multimedya ögeleri bulunabilir ve diğer bağlantı ya da link adı verilen hiper-bağlantılar ile başka Web sayfalarına geçiş yapılabilir.

İnternet ve Web terimleri aynı olguyu tanımlamaz. Zira Web sadece İnternet üzerinde çalışan bir servistir. Web kavramı, CERN'de bir bilgisayar programcısı olan Tim Berners-Lee'nin HTML adlı metin işaretleme dilini geliştirmesiyle oluşmuştur. Bugün de kendisinin başkanı olduğu W3C (World Wide Web Consortium) tarafından standartları belirlenmektedir.

Yapısı
Web’in temeli İnternet'tir. Web İnternet üzerinde kurulmuştur ve İnternet'in sunduğu mekanizmalardan çoğunun kullanılmasını sağlar. İnternet'in fiziksel görünüşleri –bilgisayarlar, ağlar ve servisler– Dünya üzerindeki diğer binlerce bilgisayara bağlanmamıza izin verir. Web, İnternet'in en tepesindeki soyutlanmış genel servisler kümesidir. World Wide Web (W3), insanların fikir ve projelerinin paylaşılmasını sağlayan bir bilgi ve kültür havuzudur. İstemci-sunucu uygulamaları ile yapılan birçok organizasyon üzerinde Web tarayıcıları istemci olarak çalışabilirler. Web yürütümü standart İstemci-sunucu modelini izler. Aşağıdaki şekilde gösterildiği gibi "Web tarayıcısı" adı verilen programı çalıştıran bir istemci bilgisayar ile Web sunucu yazılımı çalıştıran bir sunucu bilgisayar arasındaki etkileşime "istemci-sunucu" etkileşimi adı verilir. İstemci bilgisayar sunucudan HTTP'yi (Hypertext Transfer Protocol) ve İnternet mesaj standardı TCP/IP'yi kullanarak bir doküman ister ve sunucu istemcinin göstereceği dokümanı geri döndürür.-
-
-
-





What is Configuration Management?	(empty)  (empty) 
[Configuration management nedir]
Renkler: yazı örnek yazı yazı örnek yazı yazı örnek yazı 
-
-
Configuration management is the process of maintaining software and computer systems (example servers, storage, networks) in a known, desired and consistent state. It also allows access to an accurate historical record of system state for project management and audit purposes.
System Administrators mostly perform repetitive tasks like installing servers, configuring those servers, etc. These professionals can automate this task, by writing scripts.
However, it is a difficult job when they are working on a massive infrastructure. The Configuration Management tool like a Puppet was introduced to resolve such issues.

-
-
-
-
Design language / Design Vocabulary          (GITHUB)  (test) 
Design language nedir
A design language or design vocabulary is an overarching scheme or style that guides the design of a complement of products or architectural settings.
The term “Design Language” is used to describe the overall visual design of a digital product. Chances are, you’ve already got a set of resources that you refer to as your Design Language. But what makes a set of UI elements a design language?
At first glance, it appears to be: an amalgamation of component designs with a consistent visual aesthetic and brand, typically accompanied by usage guidelines in the form of online documentation. This is all good, but there’s a tremendous amount missing from this picture; arguably the very things that make it a language in the first place.
Visual communication is a complicated beast, and in most cases we over-simplify it in order to ship a consistent UI. I’m as guilty as anyone in this. However, what we cannot ignore the fact that a visual interface is in fact a very sophisticated method of visual communication that warrants attention to detail and an understanding of how the elements of design are used to speak to our users.
For the purpose of this article, when I refer to “design elements,” I am speaking to foundational elements such as color, shape, line, contrast, repetition, economy, shadows, animation types, measurements of time, etc. If thinking in terms of Atomic Design, these are the sub-atomic particles.
What is a Language?
Let’s start with a cliché. The definition of a Language (Dictionary.com):
“[4.] any set or system of such symbols as used in a more or less uniform fashion by a number of people, who are thus enabled to communicate intelligibly with one another.”
“[5.] any system of formalized symbols, signs, sounds, gestures, or the like used or conceived as a means of communicating thought, emotion, etc.”
“[7.] communication of meaning in any way; medium that is expressive, significant, etc.”
Pretty clear here that in order to call a set of designs a “design language”, they need to have a formal, unified system of meanings as a way to intelligibly communicate with our users.
 
 
If we look to written and verbal communication as a framework to guide us, we can see an atomic structure and patterns emerge that parallel UI design.
1.	Words have meaning
2.	Punctuation has meaning
3.	Types of words (nouns, adjectives, and verbs) have meaning.
4.	Grouped words have meaning & give formal structure
5.	Sentences have meaning & give formal structure
6.	Paragraphs have meaning & give formal structure
From here it continues to grow and we define more complex, larger methods of communication above these, level such as how to structure scientific objectives (hypothesis, method, result), term papers (thesis statement, outline, content, conclusion), and a myriad of story structures.
It’s clear that languages are complex systems. Everything has meaning and intent, and the structures and ways in which we combine these structures expand upon their meanings or create new ones altogether.
 
 
Make rules, then follow them.
Clear and consistent rules are what make languages successful. Inconsistencies, ambiguity, or straight-up contradictions can make languages very hard to learn, teach, and understand. How many times have you been confused by the rule “I before E, except after C”?
 
 
And make sure your rules are logical, not confusing
Language as it relates to the visual interface
A component can be a combination of atoms and molecules, so we need to define the atomic design elements in a way that gives semantic meaning, just like languages define punctuation and word types. The foundation of creating a Visual Design Language is
•	Clearly defined semantics (and no, “error”, “warning”, “success”, and “info” aren’t nearly enough)
•	Thorough and mature mapping of core elements of design with clear purposes and meanings
•	A solid family of UI components and patterns that effectively support the semantics, and use design elements (based on their meanings) to support the meaning of the components
•	Thorough, comprehensive documentation about the visual communication system
 
 
Colors are a great example of semantics, and may have multiple meanings, or no meaning at all.
Your pattern library or style guide is the dictionary and thesaurus for your Visual Design Language. Documenting the core semantics, structures, and meanings behind the elements of design (color, line, shape, etc) will add a concrete foundation behind the decisions that are made in designing and the usage of components in your interface.
Give yourself a Litmus test
When you’re working on your pattern library, UI Kit, or however else you prepare your Visual Design Language, there are some ways to ensure your design is truly linguistic. Comb through every single element of the designs and ask yourself:
•	What does this color mean?
•	What does dimensionality mean (such shadows/bevels)?
•	What does the thickness of a border mean?
•	What does a rounded corner mean?
•	What do my fonts say/mean?
•	What does the use of italics mean?
A simple framework is to fill in the blanks of this statement:
The ______ used in the ______ helps to communicate _________.
The first item of the statement is a specific design element, the second line is the component or pattern you are analyzing, and the final item is the semantic.
Example: The line thickness used in the primary button component helps to communicate important interactive elements.
Most design elements may have no meaning at all when you create your first design language. But evolving your system to follow and support semantics of the most atomic or subatomic elements will help your system to mature into a true visual language.
-
-
-
-
Objectives
Designers wishing to give their suite of products a unique but consistent look and feel define a specification for it, which can describe choices for design aspects such as materials, colour schemes, shapes, patterns, textures, or layouts. They then follow the scheme in the design of each object in the suite.
Usually, design languages are not rigorously defined; the designer basically makes one thing in a similar manner as another. In other cases, they are followed strictly, so that the products gain a strong thematic quality. For example, although there is a great variety of unusual chess set designs, the pieces within a set are usually thematically consistent.
Sometimes, designers encourage others to follow their design languages when decorating or accessorizing.
Industrial design
In automobiles, the design language is often in the grille design. For instance, many BMW vehicles share a design language,[1] including front-end styling consisting of a split "kidney grille" and four circular headlights. Some manufacturers have appropriated design language cues from rival firms.
Software
In software architecture, design languages are related to architecture description languages. The most well known design language is Unified Modeling Language.[citation needed]
In the context of graphical user interfaces, for example, human interface guidelines can be thought of as design languages for applications.
Examples
Apple
•	Snow White
•	Platinum
•	Aqua
•	Flat Design
Microsoft
•	Metro
•	Fluent Design System
•	Windows Aero
Google
•	Material Design
Automotive
Cadillac
•	Art and Science
Ford
•	New Edge
•	Kinetic Design
Mazda
•	Nagare
•	Kodo[4]
Mitsubishi
•	Dynamic Shield[5]
Subaru
•	Dynamic x Solid[6]-
-
-





Chef     	(empty)  (empty) 
[chef nedir]
Renkler: yazı örnek yazı yazı örnek yazı yazı örnek yazı 
-
-
Chef is a company and the name of a configuration management tool written in Ruby and Erlang. It uses a pure-Ruby, domain-specific language (DSL) for writing system configuration "recipes". Chef is used to streamline the task of configuring and maintaining a company's servers, and can integrate with cloud-based platforms such as Internap, Amazon EC2, Google Cloud Platform, Oracle Cloud, OpenStack, SoftLayer, Microsoft Azure, and Rackspace to automatically provision and configure new machines. Chef contains solutions for both small and large scale systems, with features and pricing for the respective ranges.
-
-







C     	(empty)  (empty) 
c nedir, c programlama dili nedir, c dili nedir
Renkler: yazı örnek yazı yazı örnek yazı yazı örnek yazı 
-
-
AT&T Bell laboratuvarlarında, Ken Thompson ve Dennis Ritchie tarafından UNIX İşletim Sistemi' ni geliştirebilmek amacıyla B dilinden türetilmiş yapısal bir programlama dilidir. Geliştirilme tarihi 1972 olmasına rağmen yayılıp yaygınlaşması Brian Kernighan ve Dennis M. Ritchie tarafından yayımlanan "C Programlama Dili" kitabından sonra hızlanmıştır. 

Günümüzde neredeyse tüm işletim sistemlerinin (Microsoft Windows, GNU/Linux, *BSD, Minix) yapımında %95' lere varan oranda kullanılmış, hâlen daha sistem, sürücü yazılımı, işletim sistemi modülleri ve hız gereken her yerde kullanılan oldukça yaygın ve sınırları belirsiz oldukça keskin bir dildir.[kaynak belirtilmeli]" Keskinliği, programcıya sonsuz özgürlüğün yanında çok büyük hatalar yapabilme olanağı sağlamasıdır. Programlamanın gelişim süreciyle beraber programlamanın karmaşıklaşması, gereksinimlerin artması ile uygulama programlarında nesne yönelimliliğin ortaya çıkmasından sonra C programcıları büyük ölçüde nesne yönelimliliği destekleyen C++ diline geçmişlerdir.
 
C Dilinin erken tarihi
C'nin ilk gelişme safhaları 1969 ile 1974 arasında AT&T Bell Laboratuvarları'nda gerçekleşti. Ritchie'ye göre, en yaratıcı devre 1972 idi. Dilin pek çok özelliği "B" adlı bir dilden türediği için, yeni dile "C" adı verildi. B dili yorumlanan bir dildi ve veri tipi desteği yoktu. Yeni donanımların farklı veri tiplerini desteklemesi, ve yorumlanan dillerin çalışma zamanında görece yavaş olması sebebi ile, C dili, tip desteği eklenmiş ve derlenen B olarak geliştirildi.
"B" adının kökeni konusunda ise söylentiler değişik: Ken Thompson B'nin BCPL programlama dilinden türediğini söylemektedir, ancak Thompson eşi Bonnie'nin onuruna adını Bon koyduğu bir programlama dili de geliştirmiştir.
1973'e kadar C yeterince güçlü bir hale gelmiş ve ilk başta PDP-11/20 assembly dili ile yazılan UNIX'in çekirdeğinin büyük kısmı C ile yeniden yazılmıştı. 
(Linus Torvalds tarafından temelleri atılan Linux, UNIX olmayıp bir UNIX türevidir. UNIX'ten ilham alan, bir grup bağımsız yazılımcı tarafından geliştirilen bir işletim sistemi çekirdeğidir.)
Böylece UNIX, çekirdeği bir assembly dili ile yazılmayan ilk işletim sistemlerinden biri olmuştu.
-
-
-
-
-
Coder vs Developer              (GITHUB)  (test) 
Coder nedir, developer nedir
Anyone who can write some code is often referred to as a coder by the people outside of the tech industry. But, usually, coders are considered the least trained or experienced level of programmers. These individuals do not have the same algorithmic knowledge as a programmer or developer, as they are often a beginner in the field, skilled in just one coding language. Coders are usually given the job of writing forthright pieces of code that can easily be delegated by the developers. As some are put-off by the title, it is sometimes used interchangeably with “Junior Programmer” or “Junior Developer.”
-
-
-
-
Web Server	 (GITHUB)
Web server nedir
Web server ya da ağ sunucusu, internet üzerinde bir web sitesinin yayınından sorumlu olan sunucudur. Web server, Hosting ya da “barındırma” işlemini internet protokolü üzerinden sunan bir sunucudur. Barındırma ya da hosting, Web sayfalarını internette yayınlamak için gerekli alanın kiralanmasıdır. Diğer bir ifade ile hosting, bir Web sitesinde yayınlanmak istenen sayfaların, resimlerin veya dokümanların internet kullanıcıları tarafından erişebileceği bir bilgisayarda tutulmasıdır.
A Web server is software or hardware that uses HTTP and other protocols to respond to client requests made over the World Wide Web (WWW). Web server software controls how a user accesses hosted files. It is accessed through the domain names of websites and ensures the delivery of the site's content to the requesting user. As hardware, a Web server is a computer that holds web server software and other files related to a website, such as HTML documents, images and JavaScript files. Web server hardware is connected to the internet and allows data to be exchanged with other connected devices.
The Web server process is an example of the client/server model. All computers that host Web sites must have Web server software. 
Leading Web servers include Apache, Microsoft's Internet Information Server (IIS) and Nginx -- pronounced engine X. Other Web servers include Novell's NetWare server, Google Web Server (GWS) and IBM's family of Domino servers.
Web servers often come as part of a larger package of internet- and intranet-related programs that are used for:
•	Sending and receiving emails.
•	Downloading requests for File Transfer Protocol (FTP) files.
•	Building and publishing Web pages.
Considerations in choosing a Web server include how well it works with the operating system and other servers; its ability to handle server-side programming; security characteristics; and the particular publishing, search engine and site building tools that come with it.
So basically a web server is the software that receives your request to access a web page. It runs a few security checks on your HTTP request and takes you to the web page. Depending on the page you have requested, the page may ask the server to run a few extra modules while generating the document to serve you. It then serves you the document you requested. Pretty awesome isn’t it.
-
A web server is server software, or hardware dedicated to running this software, that can satisfy client requests on the World Wide Web. A web server can, in general, contain one or more websites. A web server processes incoming network requests over HTTP and several other related protocols.
The primary function of a web server is to store, process and deliver web pages to clients.[1] The communication between client and server takes place using the Hypertext Transfer Protocol (HTTP). Pages delivered are most frequently HTML documents, which may include images, style sheets and scripts in addition to the text content.
 
Multiple web servers may be used for a high traffic website; here, Dell servers are installed together being used for the Wikimedia Foundation.
A user agent, commonly a web browser or web crawler, initiates communication by making a request for a specific resource using HTTP and the server responds with the content of that resource or an error message if unable to do so. The resource is typically a real file on the server's secondary storage, but this is not necessarily the case and depends on how the web server is implemented.
While the major function is to serve content, a full implementation of HTTP also includes ways of receiving content from clients. This feature is used for submitting web forms, including uploading of files.
Many generic web servers also support server-side scripting using Active Server Pages (ASP), PHP (Hypertext Preprocessor), or other scripting languages. This means that the behaviour of the web server can be scripted in separate files, while the actual server software remains unchanged. Usually, this function is used to generate HTML documents dynamically ("on-the-fly") as opposed to returning static documents. The former is primarily used for retrieving or modifying information from databases. The latter is typically much faster and more easily cached but cannot deliver dynamic content.
-
-
Type System (örnek) (örnek)
type system nedir
In programming languages, a type system is a logical system comprising a set of rules that assigns a property called a type to the various constructs of a computer program, such as variables, expressions, functions or modules.[1] These types formalize and enforce the otherwise implicit categories the programmer uses for algebraic data types, data structures, or other components (e.g. "string", "array of float", "function returning boolean"). 
The main purpose of a type system is to reduce possibilities for bugs in computer programs[2] by defining interfaces between different parts of a computer program, and then checking that the parts have been connected in a consistent way. This checking can happen statically (at compile time), dynamically (at run time), or as a combination of both. Type systems have other purposes as well, such as expressing business rules, enabling certain compiler optimizations, allowing for multiple dispatch, providing a form of documentation, etc.
A type system associates a type with each computed value and, by examining the flow of these values, attempts to ensure or prove that no type errors can occur. The given type system in question determines what constitutes a type error, but in general the aim is to prevent operations expecting a certain kind of value from being used with values for which that operation does not make sense (logic errors). Type systems are often specified as part of programming languages and built into interpreters and compilers, although the type system of a language can be extended by optional tools that perform added checks using the language's original type syntax and grammar.
Usage overview
An example of a simple type system is that of the C language. The portions of a C program are the function definitions. One function is invoked by another function. The interface of a function states the name of the function and a list of values that are passed to the function's code. The code of an invoking function states the name of the invoked, along with the names of variables that hold values to pass to it. During execution, the values are placed into temporary storage, then execution jumps to the code of the invoked function. The invoked function's code accesses the values and makes use of them. If the instructions inside the function are written with the assumption of receiving an integer value, but the calling code passed a floating-point value, then the wrong result will be computed by the invoked function. The C compiler checks the type declared for each variable sent, against the type declared for each variable in the interface of the invoked function. If the types do not match, the compiler throws a compile-time error.
A compiler may also use the static type of a value to optimize the storage it needs and the choice of algorithms for operations on the value. In many C compilers the float data type, for example, is represented in 32 bits, in accord with the IEEE specification for single-precision floating point numbers. They will thus use floating-point-specific microprocessor operations on those values (floating-point addition, multiplication, etc.).
The depth of type constraints and the manner of their evaluation affect the typing of the language. A programming language may further associate an operation with various resolutions for each type, in the case of type polymorphism. Type theory is the study of type systems. The concrete types of some programming languages, such as integers and strings, depend on practical issues of computer architecture, compiler implementation, and language design.
Fundamentals
Formally, type theory studies type systems. A programming language must have occurrence to type check using the type system whether at compile time or runtime, manually annotated or automatically inferred. As Mark Manasse concisely put it:[3]
The fundamental problem addressed by a type theory is to ensure that programs have meaning. The fundamental problem caused by a type theory is that meaningful programs may not have meanings ascribed to them. The quest for richer type systems results from this tension.
Assigning a data type, termed typing, gives meaning to a sequence of bits such as a value in memory or some object such as a variable. The hardware of a general purpose computer is unable to discriminate between for example a memory address and an instruction code, or between a character, an integer, or a floating-point number, because it makes no intrinsic distinction between any of the possible values that a sequence of bits might mean.[note 1] Associating a sequence of bits with a type conveys that meaning to the programmable hardware to form a symbolic system composed of that hardware and some program.

-


























