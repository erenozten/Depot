Field
field nedir
The following code is an example, which would fetch the ID, Name and Salary fields of the customers available in CUSTOMERS table.

SQL> SELECT ID, NAME, SALARY FROM CUSTOMERS;
-
-
-
-
-
-
SELECT nedir?
select nedir
SQL Server SELECT statement is used to fetch the data from a database table which returns data in the form of result table. These result tables are called result-sets.

Select * FROM Categories
-
-
-
-
-
-
Result set 
result set nedir
Quick definition. A result set is the output of a query. It could result in a one row, one column output or a 100+ column, million+ row output. Either way that’s a result set. Note: you can have multiple result sets from a single object (stored procedure, function etc) call.

An SQL result set is a set of rows from a database, as well as metadata about the query such as the column names, and the types and sizes of each column. Depending on the database system, the number of rows in the result set may or may not be known. Usually, this number is not known up front because the result set is built on-the-fly.
-
-
-
-
-
-
UPDATE
UPDATE nedir?
The UPDATE statement is used to modify the existing records in a table.

UPDATE Products
SET ProductName = 'Aniseed SyrupAniseed Syrup'
WHERE ProductID = 3;

Yukarıdaki işlem şu: ID'si şuna eşit olanın şu değerini buna eşitle.. Çift tırnağı kabul etmiyor. Dikkat.

Tabi ki birkaç tane column'u (veya c# taki dille: Property'yi) birden de değiştirebiliriz:

UPDATE Products
SET ProductName = 'Aniseed SyrupAniseed Syrup', QuantityPerUnit = '1 kg pkg.'
WHERE ProductID = 3;

şu hatayı verecektir, çünkü SET yazılmadı: (hata: Incorrect syntax near 'ProductName'.)

UPDATE Products
ProductName = 'Aniseed SyrupAniseed Syrup'
WHERE ProductID = 3;

To update multiple columns use the SET clause to specify additional columns. Just like with the single columns you specify a column and its new value, then another set of column and values. In this case each column is separated with a column.

Farklı bir kullanım:

Örneğin tablodaki tüm X kolonu verilerini Y değeriyle değiştirmek istiyoruz. O halde:
            
UPDATE Eren_NewTable3
SET FirstColumn = 'NEWWW', SecondColumn = 'ASDFF'

Yukarıda gördüğümüz gibi Where'i kullanmamıza gerek yok. Çünkü tüm verileri update ediyoruz. Yapılan şey şu:
Bütün row'lardaki FirstColumn = "NEWWW",
Bütün row'lardaki SecondColumn = "ASDFF"

Bir tablo oluşturup bu işlemi tekrar yapalım:

USE Northwind
CREATE TABLE ErenTable33(
Id INT,
Name varchar(22),
Surname varchar(22));

USE Northwind
SELECT * FROM ErenTable33

INSERT INTO ErenTable33(Name, Surname)
VALUES('eren', 'ox');

UPDATE ErenTable33
SET Name = 'NEWWW', Surname = 'ASDFF'
-
-
-
-
-
-
Tablo oluştur

CREATE TABLE NewTable2(
ID int,
Name varchar(255),
Surname varchar(255));
-
-
-
-
-
-
Tablo sil

DROP TABLE NewTable2;
-
-
-
-
-
-
Tabloya yeni record ekle (yeni veri ekle)

Önce table'ı seçelim, gözümüzün önünde olsun

select * from Products;

Veri ekleyelim:

INSERT INTO Products (ProductName, UnitsInStock)
VALUES('Texttt', 26);

Sadece iki property'sini doldurmuş olduk, diğerleriyle ilgilenmedik.
Fakat aşağıdaki çalışmaz çünkü explicit olarak Primary Key'e int değer vermeye çalışıyoruz. Hata: Cannot insert explicit value for identity column in table 'Products' when IDENTITY_INSERT is set to OFF.
INSERT INTO Products (ProductID)
VALUES(32324);		
-
-
-
-
-
-
Bir tablo oluşturup bu tablonun verilerini başka tablodaki verilerle populate etmek için aşağıdaki kodlar kullanılabilir
Tabloları ekleyip silip örneği SQL Server'da deneyebiliriz.

Boş tablomuzu oluşturalım:

CREATE TABLE Eren_NewTable3(
FirstColumn varchar(333),
SecondColumn varchar(333),
ThirdColumn varchar(331),
FourthColumn varchar(331)
);

Table'ı silmek ve seçmek için aşağıdaki kodları da kullanalım, elimizin altında olsun:

DROP TABLE Eren_NewTable3;

SELECT * FROM Eren_NewTable3

SELECT ContactName,CompanyName FROM Customers

Şimdi boş tabloyu populate edelim, yani dolduralım. Hangi tablodan alacağız verileri? Customers tablosundan:

Alttaki kod beklendiği gibi çalışıyor: Olan şu: ContactName, CompanyName kolonları, Third ve Fourth kolonlarına yapıştırılıyor tabi Contactname = Maria Anders ise...

INSERT INTO Eren_NewTable3(ThirdColumn, FourthColumn)
SELECT ContactName, CompanyName
FROM Customers
WHERE ContactName = 'Maria Anders'

Fakat alttaki kodda, where statement sanki yazılmamış gibi çalışıyor; yani bütün kolonları getiriyor, sanki hiç where statement yazılmamış gibi... O köşeli parantezler buna yol açıyor.

INSERT INTO Eren_NewTable3(ThirdColumn, FourthColumn)
SELECT ContactName, CompanyName
FROM Customers
[WHERE CompanyName = "birşedsdasda"]
-
-
-
-
-
-
anlık tarih bilgisini çeker:

SELECT CURRENT_TIMESTAMP;

bu da anlık tarih bilgisi çeker:

SELECT  GETDATE();
-
-
-
-
-
-
yeni bi database oluşturur:

CREATE DATABASE ERENDB;
-
-
-
-
-
-
database sil:

DROP DATABASE EreNDb;

Drop create yaparken Case Sensitive'liğin olmadığını da görmüş olduk. (ERENDB / ErenDb)
-
-
-
-
-
-
USE Northwind
SELECT * FROM Customers;           

SQL Server'da, Herhangi bir DB'ye girmeyip, mesela NorthWind'e ters tıklamayıp direk "New Query" e basıp sorgu çalıştıracaksak, sorgunun hangi database için geçerli olduğunu da belirtmemiz gerekecektir. Yoksa hata üretir; çünkü hangi database için sorgu çalıştırmak istediğimizi sistem bilemez. Böyle bir durumda USE yi kullanırız:

USE Northwind
SELECT * FROM Customers;
-
-
-
-
-
-
Tablo oluştururken primary key belirleme:

USE Northwind
   CREATE TABLE ErenTable(
   ID int,
   Name varchar(255) NOT NULL,
   Surname varchar(255) NOT NULL,
   Address varchar(255),
   PRIMARY KEY(ID)
   );

Yukarıda oluşturduğumuz tabloya veriler ekleyelim:

INSERT INTO ErenTable(ID, Name, Surname, Address)
VALUES(66, 'Ali', 'Selim', 'Mahalle1');

INSERT INTO ErenTable(ID, Name, Surname, Address)
VALUES(33, 'Murat', 'Taş', 'Mahalle2');

Veya kolon isimlerini yazmadan da veri oluşturabiliriz:

INSERT INTO ErenTable VALUES(99, 'Musa', 'Dağ', 'Dunya');

--oluşturduğumuz verileri görelim:

SELECT * FROM ErenTable;
-
-
-
-
-
-
Tüm kayıtları sil: (If you want to DELETE all the records from the CUSTOMERS table, you do not need to use the WHERE clause and the DELETE query would be as follows:)

DELETE FROM CUSTOMERS;

condition ekleyelim:

DELETE FROM CUSTOMERS 
WHERE ID = 6;
-
-
-
-
-
-
LIKE '20%' --> Finds any values that start with 20:

SELECT TOP (1000) [OrderID]
,[ProductID]
,[UnitPrice]
,[Quantity]
,[Discount]
FROM [Northwind].[dbo].[Order Details]
WHERE UnitPrice LIKE '20%' 
-
-
-
-
-
-
LIKE '%20%' --> Finds any values that have 20 in any position

SELECT TOP (1000) [OrderID]
,[ProductID]
,[UnitPrice]
,[Quantity]
,[Discount]
FROM [Northwind].[dbo].[Order Details]
WHERE UnitPrice LIKE '%20%' 

LIKE '_3%' --> Finds any values that have 3 in the second and third positions

SELECT TOP (1000) [OrderID]
,[ProductID]
,[UnitPrice]
,[Quantity]
,[Discount]
FROM [Northwind].[dbo].[Order Details]
WHERE UnitPrice LIKE '_3%' -- Finds any values that have 3 in the second and third positions

WHERE SALARY LIKE '2_%_%'
Finds any values that start with 2 and are at least 3 characters in length

WHERE SALARY LIKE '%2'
Finds any values that end with 2

WHERE SALARY LIKE '_2%3'
Finds any values that have a 2 in the second position and end with a 3

WHERE SALARY LIKE '2___3'
Finds any values in a five-digit number that start with 2 and end with 3
-
-
-
-
-
-
Aşağıda kişileri Freight'a göre grupladık. Ahmet kişisinin toplam freight'ının kaç olduğu hesaplanıyor.

SELECT CustomerId, SUM(Freight) as [asd] from Orders
GROUP BY CustomerId
-
-
-
-
-
-
orderby

SELECT CustomerId FROM Customers
ORDER BY CustomerId ASC
-
-
-
-
-
-
DISTINCT kullanımı

Önce distinct'siz, sonra distinct'li sorguyu inceleyelim:

SELECT ORDERID FROM [Order Details]
ORDER BY ORDERID ASC

SELECT DISTINCT ORDERID FROM [ORDER DETAILS]
ORDER BY ORDERID ASC
-
-
-
-
-
-
SQL GRANT REVOKE Commands
sql roller nedir sql roles nedir
DCL commands are used to enforce database security in a multiple user database environment. Two types of DCL commands are GRANT and REVOKE. Only Database Administrator's or owner's of the database object can provide/remove privileges on a database object.

SQL GRANT Command
sql grant nedir, sql grant command nedir
SQL GRANT is a command used to provide access or privileges on the database objects to the users.

The Syntax for the GRANT command is:

GRANT privilege_name
ON object_name
TO {user_name |PUBLIC |role_name}
[WITH GRANT OPTION];

privilege_name is the access right or privilege granted to the user. Some of the access rights are ALL, EXECUTE, and SELECT.

object_name is the name of an database object like TABLE, VIEW, STORED PROC and SEQUENCE.

user_name is the name of the user to whom an access right is being granted.

PUBLIC is used to grant access rights to all users.

ROLES are a set of privileges grouped together.

WITH GRANT OPTION - allows a user to grant access rights to other users.

For Example: GRANT SELECT ON employee TO user1; 

This command grants a SELECT permission on employee table to user1. You should use the WITH GRANT option carefully because for example if you GRANT SELECT privilege on employee table to user1 using the WITH GRANT option, then user1 can GRANT SELECT privilege on employee table to another user, such as user2 etc. Later, if you REVOKE the SELECT privilege on employee from user1, still user2 will have SELECT privilege on employee table.

SQL REVOKE Command:
sql revoke nedir
The REVOKE command removes user access rights or privileges to the database objects.

The Syntax for the REVOKE command is:

REVOKE privilege_name
ON object_name
FROM {user_name |PUBLIC |role_name}

For Example: REVOKE SELECT ON employee FROM user1;This command will REVOKE a SELECT privilege on employee table from user1.When you REVOKE SELECT privilege on a table from a user, the user will not be able to SELECT data from that table anymore. However, if the user has received SELECT privileges on that table from more than one users, he/she can SELECT from that table until everyone who granted the permission revokes it. You cannot REVOKE privileges if they were not initially granted by you.

Privileges and Roles:
Privileges: Privileges defines the access rights provided to a user on a database object. There are two types of privileges.

1) System privileges - This allows the user to CREATE, ALTER, or DROP database objects.
2) Object privileges - This allows the user to EXECUTE, SELECT, INSERT, UPDATE, or DELETE data from database objects to which the privileges apply.
Few CREATE system privileges are listed below:

System Privileges	Description
CREATE object	allows users to create the specified object in their own schema.
CREATE ANY object	allows users to create the specified object in any schema.
The above rules also apply for ALTER and DROP system privileges.

Few of the object privileges are listed below:

Object Privileges	Description
INSERT	allows users to insert rows into a table.
SELECT	allows users to select data from a database object.
UPDATE	allows user to update data in a table.
EXECUTE	allows user to execute a stored procedure or a function.
Roles: Roles are a collection of privileges or access rights. When there are many users in a database it becomes difficult to grant or revoke privileges to users. Therefore, if you define roles, you can grant or revoke privileges to users, thereby automatically granting or revoking privileges. You can either create Roles or use the system roles pre-defined by oracle.

Some of the privileges granted to the system roles are as given below:

System Role	Privileges Granted to the Role
CONNECT	CREATE TABLE, CREATE VIEW, CREATE SYNONYM, CREATE SEQUENCE, CREATE SESSION etc.
RESOURCE	CREATE PROCEDURE, CREATE SEQUENCE, CREATE TABLE, CREATE TRIGGER etc. The primary usage of the RESOURCE role is to restrict access to database objects.
DBA	ALL SYSTEM PRIVILEGES
Creating Roles:
The Syntax to create a role is:

CREATE ROLE role_name
[IDENTIFIED BY password];

For Example: To create a role called "developer" with password as "pwd",the code will be as follows

CREATE ROLE testing
[IDENTIFIED BY pwd];

It's easier to GRANT or REVOKE privileges to the users through a role rather than assigning a privilege directly to every user. If a role is identified by a password, then, when you GRANT or REVOKE privileges to the role, you definitely have to identify it with the password.

We can GRANT or REVOKE privilege to a role as below.

For example: To grant CREATE TABLE privilege to a user by creating a testing role:

First, create a testing Role

CREATE ROLE testing

Second, grant a CREATE TABLE privilege to the ROLE testing. You can add more privileges to the ROLE.

GRANT CREATE TABLE TO testing;

Third, grant the role to a user.

GRANT testing TO user1;

To revoke a CREATE TABLE privilege from testing ROLE, you can write:

REVOKE CREATE TABLE FROM testing;

The Syntax to drop a role from the database is as below:

DROP ROLE role_name;

For example: To drop a role called developer, you can write:

DROP ROLE testing;
-
-
-
-
-
-
Stored Procedure

CREATE PROCEDURE Eren_SelectAllCustomers
AS
BEGIN
SELECT * FROM Customers
END
GO

-- BEGIN ve END ikilisini yazmasak da oluyor.

CREATE PROCEDURE Eren_SelectAllCustomers2
AS
SELECT * FROM Customers
GO

-- AS yazmazsak çalışmıyor. Bu sorgu hata üretir.

CREATE PROCEDURE Eren_SelectAllCustomers3
SELECT * FROM Customers
GO
-
-
-
-
-
-
Dikkat! Tablo adı yazıldıktan sonra SELECT kısmındaki kolonlar intellisense kazanmış oluyor. Neden çünkü tablo adı belirlenmiş oldu; dolayısıyla içindeki kolonlar belirlenmiş oldu:

SELECT CustomerID, CompanyName 
FROM Customers

Yani intellisense i kullanmak için FROM Customers'i yazmak gerekiyor. From'dan sonra kolonların adını doğru yazıp yazmadığımızı bu intellisense sayesinde kontrol etmiş oluruz. Zaten yanlış yazmışsak zaten altı kırmızı çizgiyle gösterilecektir.
-
-
-
-
-
-
büyük küçük harf duyarsız olduğunu şu kodla test edebiliriz:  hata çıkmayacaktır:

CrEaTe ProcEdurE NEWSHIT4
AS
BEGIN
SELECT CustomerID, CoMpAnYNamE
FrOm Customers
wHeRe CUSTOMERID = 'ALFKI' OR CusTOMErId = 'ANTON'
ORDER BY CusToMerId ASC
END
GO
-
-
-
-
-
-
like örneği

SELECT CustomerID, CoMpAnYNamE
FrOm Customers
wHeRe CUSTOMERID LIKE '_AN%'  --(büyük küçük harf yine farketmiyor)
ORDER BY CusToMerId ASC
-
-
-
-
-
-
like örneği 2

CREATE PROCEDURE PROCWITHLIKELOL
AS
BEGIN
SELECT CustomerID, CompanyName
FROM
CUSTOMERS
WHERE CustomerID LIKE '%M_' (SONDAN İKİNCİ HARFİ M OLANLARI GETİR)
END
GO
-
-
-
-
-
-
MS SQL Server is a Relational Database Management System developed by Microsoft Inc. Its primary query languages are :

T-SQL
ANSI SQL
-
-
-
-
-
-
Operator	Description	Example
=	Checks if the values of two operands are equal or not, if yes then condition becomes true.	(a = b) is not true.
!=	Checks if the values of two operands are equal or not, if values are not equal then condition becomes true.	(a != b) is true.
<>	Checks if the values of two operands are equal or not, if values are not equal then condition becomes true.	(a <> b) is true.
>	Checks if the value of left operand is greater than the value of right operand, if yes then condition becomes true.	(a > b) is not true.
<	Checks if the value of left operand is less than the value of right operand, if yes then condition becomes true.	(a < b) is true.
>=	Checks if the value of left operand is greater than or equal to the value of right operand, if yes then condition becomes true.	(a >= b) is not true.
<=	Checks if the value of left operand is less than or equal to the value of right operand, if yes then condition becomes true.	(a <= b) is true.
!<	Checks if the value of left operand is not less than the value of right operand, if yes then condition becomes true.	(a !< b) is false.
!>	Checks if the value of left operand is not greater than the value of right operand, if yes then condition becomes true.	(a !> b) is true.
-
-
-
-
-
-
SQL HAKKINDA
Type nedir, member nedir
What is RDBMS?
RDBMS stands for Relational Database Management System. RDBMS is the basis for SQL, and for all modern database systems like MS SQL Server, IBM DB2, Oracle, MySQL, and Microsoft Access.
A Relational database management system (RDBMS) is a database management system (DBMS) that is based on the relational model as introduced by E. F. Codd.
What is a table?
The data in an RDBMS is stored in database objects which are called as tables. This table is basically a collection of related data entries and it consists of numerous columns and rows.
Remember, a table is the most common and simplest form of data storage in a relational database. The following program is an example of a CUSTOMERS table −
+----+----------+-----+-----------+----------+
| ID | NAME     | AGE | ADDRESS   | SALARY   |
+----+----------+-----+-----------+----------+
|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
|  2 | Khilan   |  25 | Delhi     |  1500.00 |
|  3 | kaushik  |  23 | Kota      |  2000.00 |
|  4 | Chaitali |  25 | Mumbai    |  6500.00 |
|  5 | Hardik   |  27 | Bhopal    |  8500.00 |
|  6 | Komal    |  22 | MP        |  4500.00 |
|  7 | Muffy    |  24 | Indore    | 10000.00 |
+----+----------+-----+-----------+----------+
What is a field?
Every table is broken up into smaller entities called fields. The fields in the CUSTOMERS table consist of ID, NAME, AGE, ADDRESS and SALARY.
A field is a column in a table that is designed to maintain specific information about every record in the table.

What is a Record or a Row?
A record is also called as a row of data is each individual entry that exists in a table. For example, there are 7 records in the above CUSTOMERS table. Following is a single row of data or record in the CUSTOMERS table −
+----+----------+-----+-----------+----------+
|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
+----+----------+-----+-----------+----------+
A record is a horizontal entity in a table.
What is a column?
A column is a vertical entity in a table that contains all information associated with a specific field in a table.
For example, a column in the CUSTOMERS table is ADDRESS, which represents location description and would be as shown below −
+-----------+
| ADDRESS   |
+-----------+
| Ahmedabad |
| Delhi     |
| Kota      |
| Mumbai    |
| Bhopal    |
| MP        |
| Indore    |
+----+------+
What is a NULL value?
A NULL value in a table is a value in a field that appears to be blank, which means a field with a NULL value is a field with no value.
It is very important to understand that a NULL value is different than a zero value or a field that contains spaces. A field with a NULL value is the one that has been left blank during a record creation.

SQL Constraints
Constraints are the rules enforced on data columns on a table. These are used to limit the type of data that can go into a table. This ensures the accuracy and reliability of the data in the database.
Constraints can either be column level or table level. Column level constraints are applied only to one column whereas, table level constraints are applied to the entire table.
Following are some of the most commonly used constraints available in SQL −
•	NOT NULL Constraint − Ensures that a column cannot have a NULL value.
•	DEFAULT Constraint − Provides a default value for a column when none is specified.
•	UNIQUE Constraint − Ensures that all the values in a column are different.
•	PRIMARY Key − Uniquely identifies each row/record in a database table.
•	FOREIGN Key − Uniquely identifies a row/record in any another database table.
•	CHECK Constraint − The CHECK constraint ensures that all values in a column satisfy certain conditions.
•	INDEX − Used to create and retrieve data from the database very quickly.
Data Integrity
The following categories of data integrity exist with each RDBMS −
•	Entity Integrity − There are no duplicate rows in a table.
•	Domain Integrity − Enforces valid entries for a given column by restricting the type, the format, or the range of values.
•	Referential integrity − Rows cannot be deleted, which are used by other records.
•	User-Defined Integrity − Enforces some specific business rules that do not fall into entity, domain or referential integrity.

Database Normalization
Database normalization is the process of efficiently organizing data in a database. There are two reasons of this normalization process −
•	Eliminating redundant data, for example, storing the same data in more than one table.
•	Ensuring data dependencies make sense.
Both these reasons are worthy goals as they reduce the amount of space a database consumes and ensures that data is logically stored. Normalization consists of a series of guidelines that help guide you in creating a good database structure.
Normalization guidelines are divided into normal forms; think of a form as the format or the way a database structure is laid out. The aim of normal forms is to organize the database structure, so that it complies with the rules of first normal form, then second normal form and finally the third normal form.
It is your choice to take it further and go to the fourth normal form, fifth normal form and so on, but in general, the third normal form is more than enough.
•	First Normal Form (1NF)
•	Second Normal Form (2NF)
•	Third Normal Form (3NF)
DDL / DML / DCL
DDL nedir, DML nedir, DCL nedir

DDL - Data Definition Language

Sr.No.	Command & Description
1	CREATE
Creates a new table, a view of a table, or other object in the database.
2	ALTER
Modifies an existing database object, such as a table.
3	DROP
Deletes an entire table, a view of a table or other objects in the database.

DML - Data Manipulation Language

Sr.No.	Command & Description
1	SELECT
Retrieves certain records from one or more tables.
2	INSERT
Creates a record.
3	UPDATE
Modifies records.
4	DELETE
Deletes records.

DCL - Data Control Language

Sr.No.	Command & Description
1	GRANT
Gives a privilege to user.
2	REVOKE
Takes back privileges granted from user.

SQL Logical Operators
Here is a list of all the logical operators available in SQL.
Show Examples
Sr.No.	Operator & Description
1	ALL
The ALL operator is used to compare a value to all values in another value set.
2	AND
The AND operator allows the existence of multiple conditions in an SQL statement's WHERE clause.
3	ANY
The ANY operator is used to compare a value to any applicable value in the list as per the condition.
4	BETWEEN
The BETWEEN operator is used to search for values that are within a set of values, given the minimum value and the maximum value.
5	EXISTS
The EXISTS operator is used to search for the presence of a row in a specified table that meets a certain criterion.
6	IN
The IN operator is used to compare a value to a list of literal values that have been specified.
7	LIKE
The LIKE operator is used to compare a value to similar values using wildcard operators.
8	NOT
The NOT operator reverses the meaning of the logical operator with which it is used. Eg: NOT EXISTS, NOT BETWEEN, NOT IN, etc. This is a negate operator.
9	OR
The OR operator is used to combine multiple conditions in an SQL statement's WHERE clause.
10	IS NULL
The NULL operator is used to compare a value with a NULL value.
11	UNIQUE
The UNIQUE operator searches every row of a specified table for uniqueness (no duplicates).

SQL Arithmetic Operators
Assume 'variable a' holds 10 and 'variable b' holds 20, then −
Show Examples
Operator	Description	Example
+ (Addition)	Adds values on either side of the operator.	a + b will give 30
- (Subtraction)	Subtracts right hand operand from left hand operand.	a - b will give -10
* (Multiplication)	Multiplies values on either side of the operator.	a * b will give 200
/ (Division)	Divides left hand operand by right hand operand.	b / a will give 2
% (Modulus)	Divides left hand operand by right hand operand and returns remainder.	b % a will give 0



























           