
-
-
-
-
-
-
//Beginning

interface ile ilgili bir örnek, interface örnek, interface örneği 

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using CodeInConsole;

namespace CodeInConsole
{
    class Program
    {
        public class Student
        {
            public int Id { get; set; }
            public string Name { get; set; }
        }

        interface IWork
        {
            Student GetStudentById(int id);
            void DoSomething();
            IList<Student> GetStudentList();
        }

        public class StudentWorks : IWork
        {
            public IList<Student> StudentList = CreateSampleDataAndPopulateStudentList();

            public IList<Student> GetStudentList()
            {
                return StudentList;
            }

            public Student GetStudentById(int id)
            {
                var s1 = StudentList.Cast<Student>().ElementAt(0); // pseudo
                return s1;
            }

            public void DoSomething()
            {
                Console.WriteLine("");
            }
        }

        public static IList<Student> CreateSampleDataAndPopulateStudentList()
        {
            Student s1 = new Student();
            s1.Id = 1;
            s1.Name = "Eren";

            Student s2 = new Student();
            s2.Id = 2;
            s2.Name = "Ahmet";

            var studentList = new List<Student>();
            studentList.Add(s1);
            studentList.Add(s2);

            return studentList;
        }

        public static void Main(string[] args)
        {
            StudentWorks studentWorks = new StudentWorks();

            studentWorks.GetStudentById(1);
            studentWorks.DoSomething();
            studentWorks.GetStudentList();

            Console.ReadKey();
        }
    }
}
//Öğrenilmesi gereken bilgi: static classes can't implement interfaces / static class'lar interface kullanamaz
-
-
-
-
-
-
Bir array örneği, ne yaptığını daha sonra yazacağız.

class Program
{
    static void Main()
    {
        int[] array = new int[5];

        //This array contains the elements from array[0] to array[4]. The new operator is used to create the array and initialize the array elements to their default values.In this example, all the array elements are initialized to zero.

        //   An array that stores string elements can be declared in the same way.For example:
        //   string[] stringArray = new string[6];

        int[] arr1 = new int[100];
        for (int i = 0; i < arr1.Length; i++)
        {
            arr1[i] = i;
        }

        Random r = new Random(); //note: put random class outside of any method - on class level, or will will not have always different numbers!
        int[] arr2 = new int[100];

        for (int i = 0; i < arr2.Length; i++)
        {
            arr2[i] = r.Next(100);
            Console.WriteLine(r);
        }
    }
}
-
-
-
-
-
-
class Program
{
    static void Main()
    {
        int[] numbers = new int[] { 0, 1, 2, 3, 4, 5, 6 };

        var numQuery =
            from num in numbers
            where (num % 2) == 0    
            select num;           
        foreach (int num in numQuery)
        {
            Console.Write("{0} ", num);
        }
    }
}
-
-
-
-
-
-
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

class Program
{
    public class Student
    {
        public int Id;
        public string Name;
    }

    //static class'ın member'ları da static olmalıdır
    public static class CreateStudents
    {
        //public string SampleProperty { get; set; } //hata verir, static olmalıdır
        public static string SampleProperty { get; set; }

        //public void Create() //hata verir, static olmalıdır
        public static List<Student> StudentsList { get; set; } = new List<Student>
        {
            new Student()
            {
                Id = 1,
                Name = "Ali"
            },
            new Student()
            {
                Id = 2,
                Name = "Ahmet"
            },
            new Student()
            {
                Id = 3,
                Name = "Veli"
            }
        };
    }

    static void Main()
    {
        var studentsQuery =
            from s in CreateStudents.StudentsList
            where s.Id > 1
            select s;

        foreach (var item in CreateStudents.StudentsList)
        {
            Console.WriteLine(item.Name);
        }

        Console.WriteLine("--");

        foreach (var item in studentsQuery)
        {
            Console.WriteLine(item.Id);
        }
    }
}
-
-
-
-
-
Aşağıdaki hatalıdır mesela... STORED diye bir şey yazamazsın. Ayrıca GO yazılmamış, bu da hata. Ek olarak BEGIN ve END gereksiz.

CREATE STORED PROCEDURE ASDFG
AS
BEGIN
SELECT * FROM Students
END

Gereksizleri silip yenisini yazalım:

CREATE PROCEDURE QWERTY
AS
SELECT * FROM Products
GO

stored procedure'leri SQL Server'da bulabilmek için ---> Database'e girdikten sonra --> Programmability --> Stored Procedures
-
-
-
-
-
CREATE PROCEDURE SelectAllCustomers @City nvarchar(30), @PostalCode nvarchar(10)
AS
SELECT * FROM Customers WHERE City = @City AND PostalCode = @PostalCode
GO;
-
-
-
-
-
-
SELECT column_name(s)
FROM table1
INNER JOIN table2
ON table1.column_name = table2.column_name;
-
-
-
-
-
-
SELECT Orders.OrderID, Customers.CustomerName
FROM Orders
INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID;
-
-
SELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperName
FROM ((Orders
INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID)
INNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID);
-
-
SELECT Customers.CustomerName, Orders.OrderID
FROM Customers
LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID
ORDER BY Customers.CustomerName;
-
-
-
-
-
-
SELECT Customers.CustomerName, Orders.OrderID
FROM Customers
FULL OUTER JOIN Orders ON Customers.CustomerID=Orders.CustomerID
ORDER BY Customers.CustomerName;
-
-
-
-
-
-
CREATE PROCEDURE ASDFGH
AS
BEGIN
SELECT CompanyName, CustomerID
FROM Customers
WHERE CustomerID = 'ALFKI'
END
GO
-
-
-
-
-
CREATE PROCEDURE NEWSHIT
AS
BEGIN
SELECT CustomerID, CompanyName
FROM Customers
WHERE CUSTOMERID = 'ALFKI' OR CUSTOMErId = 'ANTON'
END
GO
-
-
-
-
-
-
CrEaTe ProcEdurE NEWSHIT4
AS
BEGIN
SELECT CustomerID, CoMpAnYNamE
FrOm Customers
wHeRe CUSTOMERID = 'ALFKI' OR CusTOMErId = 'ANTON'
ORDER BY CusToMerId ASC
END
GO
-
-
-
-
-
-
CREATE PROC GODPROC
AS
BEGIN
SELECT * FROM CUSTOMERS
WHERE CUSTOMERID LIKE '__L%'
ORDER BY CUSTOMERID DESC
END
GO
-- LOL.. order by'dan sonra FIELD adını yazmayı nasıl unutuyorsun?
-
-
-
-
-
-
UPDATE CUSTOMERS
SET ADDRESS = 'Pune'
WHERE ID = 6;

SQL> UPDATE CUSTOMERS
SET ADDRESS = 'Pune', SALARY = 1000.00;
-
-
CREATE PROCEDURE NEW2
AS
BEGIN
SELECT CUSTOMERID, PRODUCTNAME
WHERE PRODUCTNAME LIKE '_S_S%'
END
GO
-
-
-
CREATE PROCEDURE NEW2
AS
BEGIN
SELECT [CompanyName], [ContactName]
FROM CUSTOMERS
WHERE [ContactName] LIKE 'A_A_E%'
END
GO
-
-
-
-
-
-
AŞağıda köşeli parantezlerle kolonları seçebildiğimizi görebiliyoruz. ayrıca LIKE'ye bak.. ilki A, üçüncü A, beşinçi E ve sonrakiler farketmez şeklinde
CREATE PROCEDURE NEW2
AS
BEGIN
SELECT [CompanyName], [ContactName]
FROM CUSTOMERS
WHERE [ContactName] LIKE 'A_A_E%'
END
GO
-
-
-
-
-
-
SELECT [STUDENTID], [STUDENTnAME] FROM DB
WHERE STUDENTID LIKE '__%W'
-
-
-
-
-
-
SELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperName
FROM ((Orders
INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID)
INNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID);
-
SELECT Customers.CustomerName, Orders.OrderID
FROM Customers
LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID
ORDER BY Customers.CustomerName;
-
-
CREATE PROC SAFH
AS
BEGIN
SELECT CompanyName, ContactTitle, Address
FROM Customers
WHERE AddreSS LIKE '_A%'
order by Address ASC
END
GO
-
-



CCREATE PROC qwedQWEASF
AS
BEGIN
SELECT CompanyName, ContactTitle, Address
FROM Customers
WHERE AddreSS LIKE '_Aqwe%DASDWR'
order by Address ASC
END
GO
-
-
incele
SELECT CompanyName, ContactTitle, Address
FROM Customers
WHERE AddreSS LIKE '12%%%%%%%s%%%%%%%%%%%%%%%%%%'
order by Address ASC
-
-
SELECT CompanyName, ContactTitle, Address
FROM Customers
WHERE AddreSS LIKE '_2%%%%%%%%%%%%%r%%%%%%%O%%%%%'
order by Address ASC
-
-
Revoke nedir?
user a verilmiş ayrıcalıkları geri alır
-
-
11	UNIQUE
The UNIQUE operator searches every row of a specified table for uniqueness (no duplicates).
-
-
SQL de default 
•	DEFAULT Constraint − Provides a default value for a column when none is specified.
-
-
DELETE FROM CUSTOMERSTABLE
WHERE CUSTOMERID = 2 
-
-
Private Protected
Private protected nedir
The private protected keyword combination is a member access modifier. A private protected member is accessible by types derived from the containing class, but only within its containing assembly. For a comparison of private protected with the other access modifiers, see Accessibility Levels.
Önemli not: Struct members cannot be private protected because the struct cannot be inherited.
 Note
The private protected access modifier is valid in C# version 7.2 and later.
-
-
-
Example
A private protected member of a base class is accessible from derived types in its containing assembly only if the static type of the variable is the derived class type. For example, consider the following code segment:

Benim örneği inceleyelim önce:
class Program
{
    public class BaseClass
    {
        private protected int hiddenValue = 10;
 
        public void AccessFromBaseClass()
        {
            hiddenValue = 25; // çalışır // ama BaseClass'ın instance'ı bu veriye erişemez. 
 
            BaseClass bc = new BaseClass();
            bc.hiddenValue = 33; //BaseClass'ın scope'u içindeyiz. Burada Baseclass'ın instance'ı üzerinden hiddenValue'ye erişebiliriz: Adı üzerinde "private" protected. Yani "private" in özelliği.. --> Class içinde erişim.
 
            Console.WriteLine(hiddenValue);    // 25
            Console.WriteLine(bc.hiddenValue); // 33
        }
    }
 
    public class DerivedClass : BaseClass
    {
        public void AccessFromDerivedClass()
        {
            var baseObject = new BaseClass();
 
            //baseObject.hiddenValue = 5; // Error --> hiddenValue can only be accessed by classes derived from BaseClass.
            // DİKKAT! -> Base class'ın objesi hiddenValue'ye erişemiyor (private özelliği). Aşağıya bak: Sadece derived class instance'I (objesi) değiştirebiliyor. Aşağıyı incele.
 
            hiddenValue = 5; // Bu çalışır... accessed through the current derived class instance. Görüldüğü üzere derivedClass'ın instance'ı hiddenValue ye erişebiliyor. // adı üzerinde private "protected".... Protected özelliğini göstermiş oldu: derived class içinden erişim.
        }
    }
 
    // Assembly2.cs  
    // Varsayalım ki:
    // Baseclass ve DerivedClass1 --> Assembly1'in içinde bulunuyor.
    // Yine varsayalım ki:
    // DerivedClass2 Assembly2 içinde bulunuyor. Bu durumda DerivedClass2'nin instance'ı hiddenValue'yi değiştiremez. Çünkü hiddenValue'yi sadece Assembly1'de bulunan Derived class'lar değiştirebilir --> an attempt to access hiddenValue as an inherited member of DerivedClass2 will produce an error, as it is only accessible by derived types in Assembly1.
    public class DerivedClass2 : BaseClass
    {
        public void Access()
        {
            var baseObject = new BaseClass();
            hiddenValue = 5; // Hata verir // çünkü assembly'ler varsayımımıza göre eşleşmeyecektir.
        }
    }
 
    static void Main(string[] args)
    {
        DerivedClass derivedClass = new DerivedClass();
        BaseClass baseClass = new BaseClass();
 
        derivedClass.AccessFromBaseClass();
 
        //baseClass.hiddenValue = 5;  // adı üzerinde "private" protected... Yani class dışından ulaşamayacağımız zaten aşikar.
        derivedClass.hiddenValue = 6; // adı üzerinde "private" protected... Yani class dışından ulaşamayacağımız zaten aşikar.
    }
}
MSDN örnek:
// Assembly1.cs  
// Compile with: /target:library  
public class BaseClass
{
    private protected int myValue = 0;
}

public class DerivedClass1 : BaseClass
{
    void Access()
    {
        var baseObject = new BaseClass();

        // Error CS1540, because myValue can only be accessed by
        // classes derived from BaseClass.
        // baseObject.myValue = 5;  
        // DİKKAT! -> Base class'ın objesi değiştiremiyor. Aşağıya bak: Sadece derived class instance'I (objesi) değiştirebiliyor…
 
        // OK, accessed through the current derived class instance
        myValue = 5;
    }
}

// Assembly2.cs  
// Compile with: /reference:Assembly1.dll  
class DerivedClass2 : BaseClass
{
    void Access()
    {
        // Error CS0122, because myValue can only be
        // accessed by types in Assembly1
        // myValue = 10;
    }
}
FCL: (framework class library)	
Örneğin Datetime:  FCL’de bulunan bir class’tır.

Constructor:
Default constructor parameterless contructor'dur. 
Parametre alan bir constructor oluşturursak, bu parametresiz olanı artık kullanılmaz olur; tabi biz parametresiz bir constructor oluşturmazsak...


IDE 
To create a C# program, you need to install an integrated development environment (IDE) with coding and debugging tools. For example: Visual Studio Community Edition.
-
-
jagged arrayz:

Jagged Arrays


A jagged array is an array whose elements are arrays. So it is basically an array of arrays.
The following is a declaration of a single-dimensional array that has three elements, each of which is a single-dimensional array of integers:

            int[][] jaggedArr = new int[3][];

Each dimension is an array, so you can also initialize the array upon declaration like this:int[ ][ ]   

jaggedArr = new int[][]
    {
    new int[ ] {1,8,2,7,9},
    new int[ ] {2,4,6},
    new int[ ] {33,42}
    };

You can access individual array elements as shown in the example below:

int x = jaggedArr[2][1]; //42

Full code:
        static void Main(string[] args)
        {
            int[][] jaggedArr = new int[3][];

            jaggedArr = new int[][]
            {
            new int[ ] {1,8,2,7,9},
            new int[ ] {2,4,6},
            new int[ ] {33,42}
            };
            int x = jaggedArr[2][1]; //42
            Console.WriteLine(x.ToString()); //42
            Console.ReadKey();
        }

Destructors

As constructors are used when a class is instantiated, destructors are automatically invoked when an object is destroyed or deleted. 

Destructors have the following attributes:
- A class can only have one destructor.
- Destructors cannot be called. They are invoked automatically.
- A destructor does not take modifiers or have parameters. 
- The name of a destructor is exactly the same as the class prefixed with a tilde (~).
Static keyword 


[member nedir, static nedir, class member nedir]
static is a modifier in C# which is applicable for the following:

Classes
Variables
Methods
Constructor

It is also applicable to properties, event, and operators. To create a static member(class, variable, methods, constructor), precede its declaration with the keyword static. When a member is declared static, it can be accessed with the name of its class directly.










