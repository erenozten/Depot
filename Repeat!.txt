using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;

namespace TrainingLinqAndSql
{
    class Program
    {
        static void Main(string[] args)
        {
            // inner join örneği 
            // İki tablodaki id'leri eşleşen tüm veriler çekiliyor
            var result = Employee.GetAllEmployees().Join(Department.GetAllDepartments(), e => e.DepartmentId, d => d.Id, 
                (emp, dep) => new
                {
                    NewName = emp.Name,
                    NewDepartment = dep.Name
                });

            foreach (var item in result)
            {
                Console.WriteLine(item.NewName + " " + item.NewDepartment);
            }

            Console.WriteLine("---");

            var result2 = Employee.GetAllEmployees().Where(e=>e.DepartmentId == 1).Join(Department.GetAllDepartments(), e => e.DepartmentId, d => d.Id,
                (emp, dep) => new
                {
                    NewName = emp.Name,
                    NewDepartment = dep.Name
                });

            foreach (var item in result2)
            {
                Console.WriteLine(item.NewName + " " + item.NewDepartment);
            }
        }
    }

    class Employee
    {
        [Key]
        public int Id { get; set; }
        public string Name { get; set; }

        [ForeignKey("Department")]
        public int DepartmentId { get; set; }

        public Department Department { get; set; }

        public static List<Employee> GetAllEmployees()
        {
            return new List<Employee>()
            {
                new Employee()
                {
                    Id = 1,
                    Name = "Ahmet",
                    DepartmentId = 1
                },
                new Employee()
                {
                    Id = 2,
                    Name = "Mehmet",
                    DepartmentId = 1
                },
                new Employee()
                {
                    Id = 3,
                    Name = "Necdet",
                    DepartmentId = 2
                },
                new Employee()
                {
                    Id = 4,
                    Name = "Şevket",
                    DepartmentId = 2
                },
                new Employee()
                {
                    Id = 5,
                    Name = "Hıdır",
                },
                new Employee()
                {
                    Id = 6,
                    Name = "Murat"
                },
            }; // örnek employee'ler oluşturulup bu employee'lerin içinde olduğu liste dönülüyor.
        }
    }

    class Department
    {
        [Key]
        public int Id { get; set; }
        public string Name { get; set; }

        public List<Employee> Employees { get; set; } = new List<Employee>();

        public static List<Department> GetAllDepartments()
        {
            return new List<Department>()
            {
                new Department()
                {
                    Id = 1,
                    Name = "HR"
                },
                new Department()
                {
                    Id = 2,
                    Name = "IT"
                },
                new Department()
                {
                    Id = 3,
                    Name = "Payroll"
                },
            }; // örnek department'lar oluşturulup bu department'ların içinde olduğu liste dönülüyor.
        }
    }

}

-
-
-
-
-
-
        {
            int sayi = 942 / 10;
            string str = sayi.ToString(); // sonuç 94   - Yani sondaki rakamı attı.

            int sayi2 = 8 / 10;
            string str2 = sayi2.ToString(); // sonuç 0  -  sekizi ona böldü, buradan sonucu sıfır veriyor. Mantıken de böyle olmalı gibi.
        }
-
-
-
-
-
-
A LANGUAGE IS STRONGLY TYPED if the compiler can guarantee that the accepted programs will execute without type errors. 
-
-

CREATE PROCEDURE NEW44
AS
BEGIN
SELECT [CompanyName], [ContactName]
FROM CUSTOMERS
WHERE [ContactName] LIKE 'A_A_E%'
END
GO
-
-
-
-
-
-
CREATE PROCEDURE QWE
AS
BEGIN
SELECT ColumnName, ColumnId FROM DB 
WHERE  ColumnaSDF LIKE '_%2%_'   -- where içinde kullanılacak property'i SELECT ile seçmemiz gerekmiyor
END
GO
-
-
-
-
-
-
class Kutu
  {
      public int Yukseklik { get; set; }
      public int Genislik { get; set; }
 
      public Kutu(int yuk, int gen)
      {
          Yukseklik = yuk;
          Genislik = gen;
      }
 
      public static Kutu operator *(Kutu k1, Kutu k2)  // eksi işareti de kullanılabilirdi. Sonuç değişmez. Operatörle ilgisi yok yani. + - * / hepsi aynı sonuç.
      {
          int toplamYukseklik = k1.Yukseklik + k2.Yukseklik;
          int toplamGenislik = k1.Genislik + k2.Genislik;
 
          Kutu k3 = new Kutu(toplamYukseklik, toplamGenislik);
          return k3;
      }
  }
 
  static void Main(string[] args)
  {
      Kutu k1 = new Kutu(7, 3);
      Kutu k2 = new Kutu(16, 4);
      Kutu k3 = k1 * k2; // burada, static'te belirttiğimiz operatörü kullanıyoruz: *
 
      Console.WriteLine(k3.Yukseklik); //19
      Console.WriteLine(k3.Genislik); //10
      Console.ReadKey();
  }
-
-
-
-
-
-
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

class Program
{
    class Student
    {
        public string Name { get; set; }
    }

    class Araba: IAraba
    {
        // IAraba'nın metotlarını implement etmesi gerek...

        public void Cam() // implement edilen metotlar PUBLIC olmak zorunda.
        {
            Console.WriteLine("");
        }

        public void Teker()
        {

        }

        public string CamaYaziYazdir()
        {
            return "Text";
        }

        public Student OgrenciyiArabayaBindir()
        {
            Student student = new Student();
            return student;
        }
    }

    //class gibi bir şeydir interface. Parantez açıp kapama yokk. Zaten anlamsız oluyor diğer şekilde.
    interface IAraba
    {
        void Cam(); // köşeli parantez yokk
        void Teker();
        string CamaYaziYazdir();
        Student OgrenciyiArabayaBindir();
    }
}

CREATE PROCEDURE QWE
AS
BEGIN
SELECT ColumnName, ColumnId FROM DB 
WHERE  ColumnaSDF LIKE '_%2%_' 
END

