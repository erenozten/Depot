
INSERT INTO Eren_NewTable3(ThirdColumn, FourthColumn)
SELECT ContactName, CompanyName
FROM Customers
WHERE ContactName = 'Maria Anders'

Fakat alttaki kodda, where statement sanki yazılmamış gibi çalışıyor; yani bütün kolonları getiriyor, sanki hiç where statement yazılmamış gibi... O köşeli parantezler buna yol açıyor.

INSERT INTO Eren_NewTable3(ThirdColumn, FourthColumn)
SELECT ContactName, CompanyName
FROM Customers
[WHERE CompanyName = "birşedsdasda"]
-
-
-
-
-
Runtime ve compile-time nedir, farklar nelerdir
Runtime vs Compile time
Runtime nedir, compile time nedir,  run time nedir, compile nedir
Runtime and compile time are programming terms that refer to different stages of software program development. Compile-time is the instance where the code you entered is converted to executable while Run-time is the instance where the executable is running. The terms "runtime" and "compile time" are often used by programmers to refer to different types of errors too.
Compile-time checking occurs during the compile time. Compile time errors are error occurred due to typing mistake, if we do not follow the proper syntax and semantics of any programming language then compile time errors are thrown by the compiler. They wont let your program to execute a single line until you remove all the syntax errors or until you debug the compile time errors. The following are usual compile time errors:
	Syntax errors
	Typechecking errors
	Compiler crashes (Rarely)
Run-time type checking happens during run time of programs. Runtime errors are the errors that are generated when the program is in running state. These types of errors will cause your program to behave unexpectedly or may even kill your program. They are often referred as Exceptions . The following are some usual runtime errors:
	Division by zero
	Dereferencing a null pointer
	Running out of memory
USE Northwind
CREATE TABLE ErenTable33(
Id INT,
Name varchar(22),
Surname varchar(22));

USE Northwind
SELECT * FROM ErenTable33

INSERT INTO ErenTable33(Name, Surname)
VALUES('eren', 'ox');


UPDATE ErenTable33
SET Name = 'NEWWW', Surname = 'ASDFF'
-
//Beginning

interface ile ilgili bir örnek, interface örnek, interface örneği 

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using CodeInConsole;

namespace CodeInConsole
{
    class Program
    {
        public class Student
        {
            public int Id { get; set; }
            public string Name { get; set; }
        }

        interface IWork
        {
            Student GetStudentById(int id);
            void DoSomething();
            IList<Student> GetStudentList();
        }

        public class StudentWorks : IWork
        {
            public IList<Student> StudentList = CreateSampleDataAndPopulateStudentList();

            public IList<Student> GetStudentList()
            {
                return StudentList;
            }

            public Student GetStudentById(int id)
            {
                var s1 = StudentList.Cast<Student>().ElementAt(0); // pseudo
                return s1;
            }

            public void DoSomething()
            {
                Console.WriteLine("");
            }
        }

        public static IList<Student> CreateSampleDataAndPopulateStudentList()
        {
            Student s1 = new Student();
            s1.Id = 1;
            s1.Name = "Eren";

            Student s2 = new Student();
            s2.Id = 2;
            s2.Name = "Ahmet";

            var studentList = new List<Student>();
            studentList.Add(s1);
            studentList.Add(s2);

            return studentList;
        }

        public static void Main(string[] args)
        {
            StudentWorks studentWorks = new StudentWorks();

            studentWorks.GetStudentById(1);
            studentWorks.DoSomething();
            studentWorks.GetStudentList();

            Console.ReadKey();
        }
    }
}
//Öğrenilmesi gereken bilgi: static classes can't implement interfaces / static class'lar interface kullanamaz
-
-
-
-
-
-
Bir array örneği, ne yaptığını daha sonra yazacağız.

class Program
{
    static void Main()
    {
        int[] array = new int[5];

        //This array contains the elements from array[0] to array[4]. The new operator is used to create the array and initialize the array elements to their default values.In this example, all the array elements are initialized to zero.

        //   An array that stores string elements can be declared in the same way.For example:
        //   string[] stringArray = new string[6];

        int[] arr1 = new int[100];
        for (int i = 0; i < arr1.Length; i++)
        {
            arr1[i] = i;
        }

        Random r = new Random(); //note: put random class outside of any method - on class level, or will will not have always different numbers!
        int[] arr2 = new int[100];

        for (int i = 0; i < arr2.Length; i++)
        {
            arr2[i] = r.Next(100);
            Console.WriteLine(r);
        }
    }
}
-
-
-
-
-
-
class Program
{
    static void Main()
    {
        int[] numbers = new int[] { 0, 1, 2, 3, 4, 5, 6 };

        var numQuery =
            from num in numbers
            where (num % 2) == 0    
            select num;           
        foreach (int num in numQuery)
        {
            Console.Write("{0} ", num);
        }
    }
}
-
-
-
-
-
-
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

class Program
{
    public class Student
    {
        public int Id;
        public string Name;
    }

    //static class'ın member'ları da static olmalıdır
    public static class CreateStudents
    {
        //public string SampleProperty { get; set; } //hata verir, static olmalıdır
        public static string SampleProperty { get; set; }

        //public void Create() //hata verir, static olmalıdır
        public static List<Student> StudentsList { get; set; } = new List<Student>
        {
            new Student()
            {
                Id = 1,
                Name = "Ali"
            },
            new Student()
            {
                Id = 2,
                Name = "Ahmet"
            },
            new Student()
            {
                Id = 3,
                Name = "Veli"
            }
        };
    }

    static void Main()
    {
        var studentsQuery =
            from s in CreateStudents.StudentsList
            where s.Id > 1
            select s;

        foreach (var item in CreateStudents.StudentsList)
        {
            Console.WriteLine(item.Name);
        }

        Console.WriteLine("--");

        foreach (var item in studentsQuery)
        {
            Console.WriteLine(item.Id);
        }
    }
}
-
-
-
-
-
Aşağıdaki hatalıdır mesela... STORED diye bir şey yazamazsın. Ayrıca GO yazılmamış, bu da hata. Ek olarak BEGIN ve END gereksiz.

CREATE STORED PROCEDURE ASDFG
AS
BEGIN
SELECT * FROM Students
END

Gereksizleri silip yenisini yazalım:

CREATE PROCEDURE QWERTY
AS
SELECT * FROM Products
GO

stored procedure'leri SQL Server'da bulabilmek için ---> Database'e girdikten sonra --> Programmability --> Stored Procedures
-
-
-
-
-
CREATE PROCEDURE SelectAllCustomers @City nvarchar(30), @PostalCode nvarchar(10)
AS
SELECT * FROM Customers WHERE City = @City AND PostalCode = @PostalCode
GO;
-
-
-
-
-
-
SELECT column_name(s)
FROM table1
INNER JOIN table2
ON table1.column_name = table2.column_name;
-
-
-
-
-
-
SELECT Orders.OrderID, Customers.CustomerName
FROM Orders
INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID;
-
-
SELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperName
FROM ((Orders
INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID)
INNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID);
-
-
SELECT Customers.CustomerName, Orders.OrderID
FROM Customers
LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID
ORDER BY Customers.CustomerName;
-
-
-
-
-
-
SELECT Customers.CustomerName, Orders.OrderID
FROM Customers
FULL OUTER JOIN Orders ON Customers.CustomerID=Orders.CustomerID
ORDER BY Customers.CustomerName;
-
-
-
-
-
-
CREATE PROCEDURE ASDFGH
AS
BEGIN
SELECT CompanyName, CustomerID
FROM Customers
WHERE CustomerID = 'ALFKI'
END
GO
-
-
-
-
-
CREATE PROCEDURE NEWSHIT
AS
BEGIN
SELECT CustomerID, CompanyName
FROM Customers
WHERE CUSTOMERID = 'ALFKI' OR CUSTOMErId = 'ANTON'
END
GO
-
-
-
-
-
-
CrEaTe ProcEdurE NEWSHIT4
AS
BEGIN
SELECT CustomerID, CoMpAnYNamE
FrOm Customers
wHeRe CUSTOMERID = 'ALFKI' OR CusTOMErId = 'ANTON'
ORDER BY CusToMerId ASC
END
GO
-
-
-
-
-
-
CREATE PROC GODPROC
AS
BEGIN
SELECT * FROM CUSTOMERS
WHERE CUSTOMERID LIKE '__L%'
ORDER BY CUSTOMERID DESC
END
GO
-- LOL.. order by'dan sonra FIELD adını yazmayı nasıl unutuyorsun?
-
-
-
-
-
-
UPDATE CUSTOMERS
SET ADDRESS = 'Pune'
WHERE ID = 6;

SQL> UPDATE CUSTOMERS
SET ADDRESS = 'Pune', SALARY = 1000.00;
-
-
CREATE PROCEDURE NEW2
AS
BEGIN
SELECT CUSTOMERID, PRODUCTNAME
WHERE PRODUCTNAME LIKE '_S_S%'
END
GO
-
-
-
CREATE PROCEDURE NEW2
AS
BEGIN
SELECT [CompanyName], [ContactName]
FROM CUSTOMERS
WHERE [ContactName] LIKE 'A_A_E%'
END
GO
-
-
-
-
-
-
AŞağıda köşeli parantezlerle kolonları seçebildiğimizi görebiliyoruz. ayrıca LIKE'ye bak.. ilki A, üçüncü A, beşinçi E ve sonrakiler farketmez şeklinde
CREATE PROCEDURE NEW2
AS
BEGIN
SELECT [CompanyName], [ContactName]
FROM CUSTOMERS
WHERE [ContactName] LIKE 'A_A_E%'
END
GO
-
-
-
-
-
-
SELECT [STUDENTID], [STUDENTnAME] FROM DB
WHERE STUDENTID LIKE '__%W'
-
-
-
-
-
-
SELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperName
FROM ((Orders
INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID)
INNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID);
-
SELECT Customers.CustomerName, Orders.OrderID
FROM Customers
LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID
ORDER BY Customers.CustomerName;
-
-
CREATE PROC SAFH
AS
BEGIN
SELECT CompanyName, ContactTitle, Address
FROM Customers
WHERE AddreSS LIKE '_A%'
order by Address ASC
END
GO
-
-



CCREATE PROC qwedQWEASF
AS
BEGIN
SELECT CompanyName, ContactTitle, Address
FROM Customers
WHERE AddreSS LIKE '_Aqwe%DASDWR'
order by Address ASC
END
GO
-
-
incele
SELECT CompanyName, ContactTitle, Address
FROM Customers
WHERE AddreSS LIKE '12%%%%%%%s%%%%%%%%%%%%%%%%%%'
order by Address ASC
-
-
SELECT CompanyName, ContactTitle, Address
FROM Customers
WHERE AddreSS LIKE '_2%%%%%%%%%%%%%r%%%%%%%O%%%%%'
order by Address ASC
-
-
Revoke nedir?
user a verilmiş ayrıcalıkları geri alır
-
-
11	UNIQUE
The UNIQUE operator searches every row of a specified table for uniqueness (no duplicates).
-
-
SQL de default 
•	DEFAULT Constraint − Provides a default value for a column when none is specified.
-
-
DELETE FROM CUSTOMERSTABLE
WHERE CUSTOMERID = 2 
-
-
Private Protected
Private protected nedir
The private protected keyword combination is a member access modifier. A private protected member is accessible by types derived from the containing class, but only within its containing assembly. For a comparison of private protected with the other access modifiers, see Accessibility Levels.
Önemli not: Struct members cannot be private protected because the struct cannot be inherited.
 Note
The private protected access modifier is valid in C# version 7.2 and later.
-
-
-
Example
A private protected member of a base class is accessible from derived types in its containing assembly only if the static type of the variable is the derived class type. For example, consider the following code segment:

Benim örneği inceleyelim önce:
class Program
{
    public class BaseClass
    {
        private protected int hiddenValue = 10;
 
        public void AccessFromBaseClass()
        {
            hiddenValue = 25; // çalışır // ama BaseClass'ın instance'ı bu veriye erişemez. 
 
            BaseClass bc = new BaseClass();
            bc.hiddenValue = 33; //BaseClass'ın scope'u içindeyiz. Burada Baseclass'ın instance'ı üzerinden hiddenValue'ye erişebiliriz: Adı üzerinde "private" protected. Yani "private" in özelliği.. --> Class içinde erişim.
 
            Console.WriteLine(hiddenValue);    // 25
            Console.WriteLine(bc.hiddenValue); // 33
        }
    }
 
    public class DerivedClass : BaseClass
    {
        public void AccessFromDerivedClass()
        {
            var baseObject = new BaseClass();
 
            //baseObject.hiddenValue = 5; // Error --> hiddenValue can only be accessed by classes derived from BaseClass.
            // DİKKAT! -> Base class'ın objesi hiddenValue'ye erişemiyor (private özelliği). Aşağıya bak: Sadece derived class instance'I (objesi) değiştirebiliyor. Aşağıyı incele.
 
            hiddenValue = 5; // Bu çalışır... accessed through the current derived class instance. Görüldüğü üzere derivedClass'ın instance'ı hiddenValue ye erişebiliyor. // adı üzerinde private "protected".... Protected özelliğini göstermiş oldu: derived class içinden erişim.
        }
    }
 
    // Assembly2.cs  
    // Varsayalım ki:
    // Baseclass ve DerivedClass1 --> Assembly1'in içinde bulunuyor.
    // Yine varsayalım ki:
    // DerivedClass2 Assembly2 içinde bulunuyor. Bu durumda DerivedClass2'nin instance'ı hiddenValue'yi değiştiremez. Çünkü hiddenValue'yi sadece Assembly1'de bulunan Derived class'lar değiştirebilir --> an attempt to access hiddenValue as an inherited member of DerivedClass2 will produce an error, as it is only accessible by derived types in Assembly1.
    public class DerivedClass2 : BaseClass
    {
        public void Access()
        {
            var baseObject = new BaseClass();
            hiddenValue = 5; // Hata verir // çünkü assembly'ler varsayımımıza göre eşleşmeyecektir.
        }
    }
 
    static void Main(string[] args)
    {
        DerivedClass derivedClass = new DerivedClass();
        BaseClass baseClass = new BaseClass();
 
        derivedClass.AccessFromBaseClass();
 
        //baseClass.hiddenValue = 5;  // adı üzerinde "private" protected... Yani class dışından ulaşamayacağımız zaten aşikar.
        derivedClass.hiddenValue = 6; // adı üzerinde "private" protected... Yani class dışından ulaşamayacağımız zaten aşikar.
    }
}
MSDN örnek:
// Assembly1.cs  
// Compile with: /target:library  
public class BaseClass
{
    private protected int myValue = 0;
}

public class DerivedClass1 : BaseClass
{
    void Access()
    {
        var baseObject = new BaseClass();

        // Error CS1540, because myValue can only be accessed by
        // classes derived from BaseClass.
        // baseObject.myValue = 5;  
        // DİKKAT! -> Base class'ın objesi değiştiremiyor. Aşağıya bak: Sadece derived class instance'I (objesi) değiştirebiliyor…
 
        // OK, accessed through the current derived class instance
        myValue = 5;
    }
}

// Assembly2.cs  
// Compile with: /reference:Assembly1.dll  
class DerivedClass2 : BaseClass
{
    void Access()
    {
        // Error CS0122, because myValue can only be
        // accessed by types in Assembly1
        // myValue = 10;
    }
}
FCL: (framework class library)	
Örneğin Datetime:  FCL’de bulunan bir class’tır.

Constructor:
Default constructor parameterless contructor'dur. 
Parametre alan bir constructor oluşturursak, bu parametresiz olanı artık kullanılmaz olur; tabi biz parametresiz bir constructor oluşturmazsak...


IDE 
To create a C# program, you need to install an integrated development environment (IDE) with coding and debugging tools. For example: Visual Studio Community Edition.
-
-
jagged arrayz:

Jagged Arrays


A jagged array is an array whose elements are arrays. So it is basically an array of arrays.
The following is a declaration of a single-dimensional array that has three elements, each of which is a single-dimensional array of integers:

            int[][] jaggedArr = new int[3][];

Each dimension is an array, so you can also initialize the array upon declaration like this:int[ ][ ]   

jaggedArr = new int[][]
    {
    new int[ ] {1,8,2,7,9},
    new int[ ] {2,4,6},
    new int[ ] {33,42}
    };

You can access individual array elements as shown in the example below:

int x = jaggedArr[2][1]; //42

Full code:
        static void Main(string[] args)
        {
            int[][] jaggedArr = new int[3][];

            jaggedArr = new int[][]
            {
            new int[ ] {1,8,2,7,9},
            new int[ ] {2,4,6},
            new int[ ] {33,42}
            };
            int x = jaggedArr[2][1]; //42
            Console.WriteLine(x.ToString()); //42
            Console.ReadKey();
        }

Destructors

As constructors are used when a class is instantiated, destructors are automatically invoked when an object is destroyed or deleted. 

Destructors have the following attributes:
- A class can only have one destructor.
- Destructors cannot be called. They are invoked automatically.
- A destructor does not take modifiers or have parameters. 
- The name of a destructor is exactly the same as the class prefixed with a tilde (~).
Static keyword 


[member nedir, static nedir, class member nedir]
static is a modifier in C# which is applicable for the following:

Classes
Variables
Methods
Constructor

It is also applicable to properties, event, and operators. To create a static member(class, variable, methods, constructor), precede its declaration with the keyword static. When a member is declared static, it can be accessed with the name of its class directly.
Static Class
A static class is declared with the help of static keyword. A static class can only contain static data members, static methods, and a static constructor. It is not allowed to create objects of the static class. Static classes are sealed, means one cannot inherit a static class from another class.


-
-
-
Class members (variables, properties, methods) can also be declared as static. This makes those members belong to the class itself, instead of belonging to individual objects. No matter how many objects of the class are created, there is only one copy of the static member.

        public class Cat
        {
            public static int Count = 0;
            public Cat()
            {
                Count++;
            }

            public void ShowCount()
            {
                Console.WriteLine(Count);
            }
        }

        static void Main()
        {
            Cat c1 = new Cat();
            Cat c2 = new Cat();
            Cat c3 = new Cat();
            Cat c4 = new Cat();
            c1.ShowCount(); // ShowCount metodu üzerinden; herhangi bir objemizi kullanarak (c1) count member'ini yazdırdık. ('count' her obje için aynı değere sahip olduğu için istediğimiz obje üzerinden yazdırabiliriz. Her obje için aynı değere sahip çünkü static olarak tanımlanmış..)


            Console.WriteLine(Cat.Count); //Cat class'ı üzerinden direkt olarak count'u yazdırdık. 'count' statik bir member olduğu için Cat class'ına ait bir obje üzerinden değil de direkt Cat class'ı üzerinden çağırabildik.
            Console.ReadKey();
        }






important on ArrayList
We don't recommend that you use the ArrayList class for new development. Instead, we recommend that you use the generic List<T> class. The ArrayList class is designed to hold heterogeneous collections of objects. However, it does not always offer the best performance. Instead, we recommend the following:
•	For a heterogeneous collection of objects, use the List<Object> (in C#) or List(Of Object) (in Visual Basic) type.
•	For a homogeneous collection of objects, use the List<T> class.
See Performance Considerations in the List<T> reference topic for a discussion of the relative performance of these classes. See Non-generic collections shouldn't be used on GitHub for general information on the use of generic instead of non-generic collection types.


-


The ArrayList is not guaranteed to be sorted. You must sort the ArrayList by calling its Sort method prior to performing operations (such as BinarySearch) that require the ArrayList to be sorted. To maintain a collection that is automatically sorted as new elements are added, you can use the SortedSet<T> class.
The capacity of an ArrayList is the number of elements the ArrayList can hold. As elements are added to an ArrayList, the capacity is automatically increased as required through reallocation. The capacity can be decreased by calling TrimToSize or by setting the Capacity property explicitly.
.NET Framework only: For very large ArrayList objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the enabled attribute of the <gcAllowVeryLargeObjects> configuration element to true in the run-time environment.
Elements in this collection can be accessed using an integer index. Indexes in this collection are zero-based.
The ArrayList collection accepts null as a valid value. It also allows duplicate elements.
Using multidimensional arrays as elements in an ArrayList collection is not supported.


Iteration (GITHUB)
iteration nedir iterate nedir

Iteration, in the context of computer programming, is a process wherein a set of instructions or structures are repeated in a sequence a specified number of times or until a condition is met. When the first set of instructions is executed again, it is called an iteration. When a sequence of instructions is executed in a repeated manner, it is called a loop.

Iteration is the repetition of a process in a computer program, usually done with the help of loops.
An example of an iteration programming language is as follows:

Consider a database table containing 1000 student records. Each record contains the following fields:
•	First name
•	Last name
•	Roll no
If one wants to copy all the student records from the database and print them, the best way to retrieve the record is to iterate or loop through each record. It can be executed using the for loop statement as shown below:

for (int i=0; i<1000; i++)
{
\\Print first name and last name from table
}

In the above example, i is an iterator starting from the first student record to the last student record.
-
Integration (GITHUB)
integration nedir
Integration is the act of bringing together smaller components into a single system that functions as one. In an IT context, integration refers to the end result of a process that aims to stitch together different, often disparate, subsystems so that the data contained in each becomes part of a larger, more comprehensive system that, ideally, quickly and easily shares data when needed. This often requires that companies build a customized architecture or structure of applications to combine new or existing hardware, software and other communications.
-
class Program
{
    public class Student
    {
        public int Id;
        public string Name;
    }
 
    //static class'ın member'ları da static olmalıdır
    public static class CreateStudents
    {
        //public string SampleProperty { get; set; } //hata verir, static olmalıdır
        public static string SampleProperty { get; set; }
 
        //public void Create() //hata verir, static olmalıdır
        public static List<Student> StudentsList { get; set; } = new List<Student>
        {
            new Student()
            {
                Id = 1,
                Name = "Ali"
            },
            new Student()
            {
                Id = 2,
                Name = "Ahmet"
            },
            new Student()
            {
                Id = 3,
                Name = "Veli"
            }
        };
    }
 
    static void Main()
    {
        var studentsQuery =
            from s in CreateStudents.StudentsList
            where s.Id > 1
            select s;
 
        foreach (var item in CreateStudents.StudentsList)
        {
            Console.WriteLine(item.Name);
        }
 
        Console.WriteLine("--");
 
        foreach (var item in studentsQuery)
        {
            Console.WriteLine(item.Id);
        }
    }
}

IF DATEPART(dw, GETDATE()) = 7 OR DATEPART(dw, GETDATE()) = 1
BEGIN
   PRINT 'It is the weekend.';
   PRINT 'Get some rest on the weekend!';
END;
ELSE
BEGIN
   PRINT 'It is a weekday.';
   PRINT 'Get to work on a weekday!';
END;
-
-
-
-
-
-
INSERT INTO TABLE24(NAME, SURNAME) VALUES ('EE', 'EWE')
-
UPDATE Products
SET ProductName = 'Aniseed SyrupAniseed Syrup', QuantityPerUnit = '1 kg pkg.'
WHERE ProductID = 3;
-
Örneğin tablodaki tüm X kolonu verilerini Y değeriyle değiştirmek istiyoruz. O halde:
            
UPDATE Eren_NewTable3
SET FirstColumn = 'NEWWW', SecondColumn = 'ASDFF'

Yukarıda gördüğümüz gibi Where'i kullanmamıza gerek yok. Çünkü tüm verileri update ediyoruz. Yapılan şey şu:
Bütün row'lardaki FirstColumn = "NEWWW",
Bütün row'lardaki SecondColumn = "ASDFF"

Bir tablo oluşturup bu işlemi tekrar yapalım:

USE Northwind
CREATE TABLE ErenTable33(
Id INT,
Name varchar(22),
Surname varchar(22));
-
-
-
-
-
-
foreachloop with an array 

class Program
{
    static void Main()
    {
        int[] numbers = new int[] { 0, 1, 2, 3, 4, 5, 6 };

        var numQuery =
            from num in numbers
            where (num % 2) == 0    
            select num;           
        foreach (int num in numQuery)
        {
            Console.Write("{0} ", num);
        }
    }
}

SELECT column_name
FROM table1sdsd
INNER JOIN table2ds
ON table1.column_name = table2.column_name;

UPDATE STABLE
SET NAMECOLUMN = 'QWE'
-
aşağıdakileri yazalım:
INSERT INTO TABLE1(Name, Surname) 
VALUES('q','ee')

<div class="form-group">
    <input asp-for="Name" class="form-control" />
    <input asp-for="About" class="form-control" />
</div>
*@
    </form>
</div>
-


Initialization (GITHUB)
Initialization nedir
Object'in property'lerini objenin creation time'ında Set etmeye yarar. Yani objeyi üretirken property'lerini set etmeye yarayan bir şeydir (neydir? Bir Special Feature'dir [pluralsight]

        public class Employee
        {

        }

        public static void Main(string[] args)
        {
            Employee emp = new Employee(); // null dönmeyecektir.. initialize ettik. Constructor kullandık. Ne olmuş oldu? emp üretilmiş oldu... Hatırlayalım ki constructor kullanıldığı zaman yeni obje (instance) üretilmiş olur.
            Employee emp2; // null dönecektir.

            Console.WriteLine(emp); // hata üretmez
            Console.WriteLine(emp2); // HATA! Might not be initialized before accessing.

            Console.ReadLine();
	}
Initialization MSDN anlatımı:
Local variables in C# must be initialized before they are used. For example, you might declare a local variable without initialization as in the following example:
            int myInt; // Declaration
You cannot use it before you initialize it. You can initialize it using the following statement:
            myInt = new int();  // Initialization // Invoke default constructor for int type.
This statement is equivalent to the following statement:

            myInt = 0;         // Assign an initial value, 0 in this example.  
You can, of course, have the declaration and the initialization in the same statement as in the following examples:
            int myInt = new int(); // declaration and the initialization
–or–
            int myInt = 0; // declaration and the initialization
Using the new operator calls the default constructor of the specific type and assigns the default value to the variable. In the preceding example, the default constructor assigned the value 0 to myInt. For more information about values assigned by calling default constructors, see Default Values Table.
With user-defined types, use new to invoke the default constructor. For example, the following statement invokes the default constructor of the Point struct: 

            Point p = new Point(); // Invoke default constructor for the struct.  

After this call, the struct is considered to be definitely assigned; that is, all its members are initialized to their default values.
Örnek:
  int myInt = new int(); // 0 dönüyor
            int otherInt; // 0 dönüyor //initialize etmediğimiz halde 0 değerini aldı. String'de null değer alabildi. Neden int null alamadı? Cevabı aşağıdaki notta: Reference type value type olayı!
            //int otherInt2 = null; // hata verir. Cannot convert null to int.

            //string myString = new string(); // böyle bir şey yazamazsın. Hata verir.
            string otherString; // null dönüyor
            string otherString2 = null; // null dönüyor

// int is a primitive type and only ReferenceTypes (objects) are nullable.
// not2: An int is a value type. It is really of type Int32. Objects that can be nullable are reference types. At a basic level the difference is that a value type will store the value with the variable where a reference type will store a reference to the value. A reference can be null, meaning that it doesn't point to a value. Where a value type always has a value.
Nullable wraps a value type to allow you to have the option of being null. Using int? is just a compiler shortcut to declare a nullable type.
// not3: int is a value type, which can only hold a value...
INSERT INTO ErenTable33(Name, Surname)
VALUES('eren', 'ox');


UPDATE ErenTable33
SET Name = 'NEWWW', Surname = 'ASDFF'
-