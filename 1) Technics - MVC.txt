-
-
-
-
-
-
Redirecttoaction kullanırken viewbag ve viewdata kullanılmaz, null gider. Tempdata kullan.
The ViewBag and ViewData only survives the current request. TempData is the thing to use when you use redirects (and only then): http://rachelappel.com/when-to-use-viewbag-viewdata-or-tempdata-in-asp.net-mvc-3-applications states this clearly:
[...] the TempData object works well in one basic scenario:
•	Passing data between the current and next HTTP requests

-
-
-
-
-
-
Index sayfasındaki foreach döngüsü içindeki formlar doğru ve sorunsuz bir şekilde nasıl oluşturulur
neden index'te form oluşturuyoruz? Çünkü dataları delete'ye basıldığında silmemiz gerek. Yani listedeki her bir entity için farklı bir form, hazır olarak beklemeli. Yani button'un ait olduğu entity, delete'ye basınca silinmeli. Yani bir şekilde Id değerini HTTPPost metoduna parametre içine başmamız lazım.
Bunu yapmak için 2 yol var, ya HTML.Beginform içinde routeValue olarak veririz, ya da form içinde hidden input kullanmamız gerekir. Bir örnek: (%100 doğru denemez, formmethod post yazmasak da çalışıyor:
https://stackoverflow.com/questions/15358134/asp-net-mvc-3-delete-http-post

Html.BeginForm("action","controller", new { Id = item.ID}, FormMethod.Post);
OR

@using (Html.BeginForm("Delete", "Member", FormMethod.Post))
{
    @Html.Hidden("id", item.ID)
    <input type="image" src="Content/delete.png" />
}


İndex foreach, index foreach

Kısaca şöyle:

@foreach (var item in Model)
        {
 
            @using (Html.BeginForm("Delete", "Book", new { id = item.Id })){

Burada @using yazmayı unutma, yoksa view'da istemediğin şeyler görebilirsin. Şunun gibi:

Microsoft.AspNetCore.Mvc.Rendering.MvcForm Microsoft.AspNetCore.Mvc.Rendering.MvcForm Microsoft.AspNetCore.Mvc.Rendering.MvcForm Microsoft.AspNetCore.Mvc.Rendering.MvcForm Microsoft.AspNetCore.Mvc.Rendering.MvcForm


View:

@model IEnumerable<KitapAppEncore.Models.Book>
 
@{
    ViewData["Title"] = "Index";
}
 
<h1>Index</h1>
 
<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Comment)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Page)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Page)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.CurrentPage)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.About)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.IsFavourite)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.IsRead)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Genre)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
 
            @using (Html.BeginForm("Delete", "Book", new { id = item.Id })){
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Comment)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Page)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Page)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.CurrentPage)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.About)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.IsFavourite)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.IsRead)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Genre.Id)
                    </td>
                    <td>
                        <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                        <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                        <a asp-action="Delete" asp-route-id="@item.Id">Delete</a> |
                        <input type="submit" value="Delete" />
                        @*@Html.ActionLink("Del", "Delete", "Book", new { id = item.Id });*@
                    </td>
                    <td>
                    </td>
                </tr>
            }
        }
 
        @*<form asp-action="Delete">
                <input type="hidden" asp-for="@item.Id" />
                <input type="submit" value="Deleteee" class="btn btn-danger" /> |
                <a asp-action="Index">Back to List</a>
            </form>*@
 
    </tbody>
</table>


Form işlemi -> Edit sayfası için form yollanması
Durum: Kullanıcı Index sayfasına girer. Index'te data tablosu vardır. Her bir data'nın sağ kısmında edit,delete,details gibi linkler vardır. Bunlara tıklandığında ilgili view'a gidilir. 
Index'te herhangi bir datanın sağ kısmındaki Edit'e basıldığında, data'nın id'sine göre Edit actionresult'ı çalışır. ActionResult'ta -> gelen ID'ye göre database'deki entity bulunur. Bu entity view'a yapıştırılır. Entity'nin property'leri bir form içinde view'un içinde yazılır.

Edit view'u:

@model KitapAppEncore.Models.Book
 
@{
    ViewData["Title"] = "Edit";
}
 
<h1>Edit</h1>
 
<h4>Book</h4>
<hr />
 
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Comment" class="control-label"></label>
                <input asp-for="Comment" class="form-control" />
                <span asp-validation-for="Comment" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Page" class="control-label"></label>
                <input asp-for="Page" class="form-control" />
                <span asp-validation-for="Page" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="CurrentPage" class="control-label"></label>
                <input asp-for="CurrentPage" class="form-control" />
                <span asp-validation-for="CurrentPage" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="About" class="control-label"></label>
                <input asp-for="About" class="form-control" />
                <span asp-validation-for="About" class="text-danger"></span>
            </div>
            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="IsFavourite" /> @Html.DisplayNameFor(model => model.IsFavourite)
                </label>
            </div>
            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="IsRead" /> @Html.DisplayNameFor(model => model.IsRead)
                </label>
            </div>
            <div class="form-group">
                <label asp-for="GenreId" class="control-label"></label>
                <select asp-for="GenreId" class="form-control" asp-items="ViewBag.GenreId"></select>
                <span asp-validation-for="GenreId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>
 
<div>
    <a asp-action="Index">Back to List</a>
</div>
 
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}



[HttpGet]
public async Task<IActionResult> Edit(int? id)
{
    if (id == null)
    {
        return NotFound();
    }
 
    var book = await _context.Books.FindAsync(id);
    if (book == null)
    {
        return NotFound();
    }
    ViewData["GenreId"] = new SelectList(_context.Genres, "Id", "Id", book.GenreId);
    return View(book);
}

[HttpPost]
     [ValidateAntiForgeryToken]
     //public async Task<IActionResult> Edit(int id, [Bind("Id,Name,Comment,Page,PageNumber,CurrentPage,About,IsFavourite,IsRead,GenreId")] Book book)
     //Yukarıdaki Bind metodu da kullanılabilir (güvenlik için). Aşağıdakinden daha güvenli olacaktır. 
     public async Task<IActionResult> Edit(int id, string Name, string name, Book book) //buradaki parametre isimleri (id, Name, name) --> entity'nin property'lerinden geliyor (yani Book book'un property'leri). Görüldüğü üzere büyük küçük harf duyarlı değil (Name de, name de aynı)
     {
         if (id != book.Id)
         {
             return NotFound();
         }
 
         if (ModelState.IsValid)
         {
             try
             {
                 _context.Update(book);
                 await _context.SaveChangesAsync();
             }
             catch (DbUpdateConcurrencyException)
             {
                 if (!BookExists(book.Id))
                 {
                     return NotFound();
                 }
                 else
                 {
                     throw;
                 }
             }
             return RedirectToAction(nameof(Index));
         }
         ViewData["GenreId"] = new SelectList(_context.Genres, "Id", "Id", book.GenreId);
         return View(book);
     }
 

@Html.TextBoxFor(p=>p.Name)

Form işlemi -> Delete sayfası için form yollanması

Şu formda entity'nin property'leri boş olarak ActionResult'a ulaşıyor:
Yani Book bookHere nin property'leri null oluyor. Fakat aynı işlem Edit sayfasında yapıldığında book'un property'leri dolu geliyor. Neden?
Bunun sebebi olarak şu söylenebilir: Delete sayfasında form doldurmuyoruz. Sadece action'dan gelen verileri Delete View'unda sergiliyoruz. Yani bu sayfada bir form doldurma işlemi yapmıyoruz. Dolayısıyla form yollanmıyor, dolayısıyla da Book bookHere isminde bir parametre oluşturduğumuzda -> property'leri null geliyor. Örneğin aynı Delete View'una input'lar koyduğumuz zaman, bunlara girilen değerleri Book book parametresinde yakalayabiliyoruz:
@*Verilerin ActionResult'taki parametrelere ulaşmasını işte bunlar sağlıyor. Bu textboxlara yazdığımız veriler, actionresult'taki parametrelere düşecek:
<div class="form-group">
    <input asp-for="Name" class="form-control" />
    <input asp-for="About" class="form-control" />
</div>
*@

Veya şunlarla de verileri forma doldurabiliriz: Hidden inputlarla:

<input type="hidden" asp-for="Name" />
<input type="hidden" asp-for="About" />

Görüldüğü üzere yine input'ları kullanmış olduk form verilerini doldurmak için. Hatırlarsak delete view'unda input olmadığı için Action'daki parametrelere veri düşmediğini söylemiştik. Hem Book bookHere parametresi, hem string name, string about parametreleri, hepsi boş geliyordu. Ama input kullandığımız zaman form'a bir veri eklemiş oluyoruz ve bu veri de Action tarafında elimize düşmüş oluyor.
Book book parametresinde yakalayabildiğimiz gibi, property isimleriyle aynı isimde parametreler üreterek de aynı verileri yakalayabiliriz.

bookHere boş geliyor, 
ve aynı isimde parametreler kullansak dahi property'leri çekemiyoruz.
 public async Task<IActionResult> DeleteConfirmed(int id, Book bookHere, string Name, string name)

Örneğin Name property'si için bir textbox oluştursak ve actionresult'ta aynı property (Name) isminde bir parametre oluştursak veriler eşleşecektir. Parametreye veri düşecektir.

@Html.TextBoxFor(p=>p.Name)

Peki ActionResult içinde bu Name property'sini çekmek için hangi isme sahip bir parametre oluşturmalıyız? Tabi ki Name ismine sahip bir parametre oluşturmalıyız. Büyük küçük harf duyarlılığı yoktur. Yani şu parametreler oluşturulabilir:
String name
String Name
İkisi de uygundur. Form'dan gelen veri buraya düşecektir.
Şimdi delete'nin view ve actionresult'ını görelim:


@model KitapAppEncore.Models.Book
 
@{
    ViewData["Title"] = "Delete";
}
 
<h1>Delete</h1>
 
<h3>Are you sure you want to delete this?</h3>
<div>
    <form asp-action="Delete">
 
        <h4>Book</h4>
        <hr />
        <dl class="row">
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Name)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Name)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Comment)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Comment)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Page)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Page)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Page)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Page)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.CurrentPage)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.CurrentPage)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.About)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.About)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.IsFavourite)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.IsFavourite)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.IsRead)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.IsRead)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Genre)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Genre.Id)
            </dd>
        </dl>
        @*<input type="hidden" asp-for="Id" />
            <input type="hidden" asp-for="Name" />*@
        <input type="submit" value="DeleteThs" class="btn btn-danger" /> |
        <a asp-action="Index">Back to List</a>
        
@*Verilerin ActionResult'taki parametrelere ulaşmasını işte bunlar sağlıyor. Bu textboxlara yazdığımız veriler, actionresult'taki parametrelere düşecek:
<div class="form-group">
    <input asp-for="Name" class="form-control" />
    <input asp-for="About" class="form-control" />
</div>
*@
    </form>
</div>



// GET: Book/Delete/5
public async Task<IActionResult> Delete(int? id)
{
    if (id == null)
    {
        return NotFound();
    }
 
    var book = await _context.Books
        .Include(b => b.Genre)
        .FirstOrDefaultAsync(m => m.Id == id);
    if (book == null)
    {
        return NotFound();
    }
 
    return View(book);
}
 
//[HttpPost]
//public ActionResult Delete(Book book)
//{
//    return View();
//}
 
[HttpPost, ActionName("Delete")] //Delete nin POST işlemi olduğuna DİKKAT. DeleteConfirmed değil...
[ValidateAntiForgeryToken]
public async Task<IActionResult> DeleteConfirmed(int id, Book bookHere)
{
    return RedirectToAction(nameof(Index));

    var book = await _context.Books.FindAsync(id);
    _context.Books.Remove(book);
    await _context.SaveChangesAsync();
    return RedirectToAction(nameof(Index));
        }
-
-
-
-
-
-
EditorForModel
Editorformodel nedir
Her bir property için EditorFor oluşturacağımıza; View'a yollanmış olan Model'in tüm property'leri için birer editorfor oluşturmaksızın, bu işlemi tek bir satır kodla halledebiliriz:
@Html.EditorForModel();
Bu kod, bütün property'ler için editör oluşturacaktır. Her bir property için EditorFor oluşturmuş gibi...
@model MyNamespace.Models.Person

/* So, you need an Editor for the Person model? */
@Html.EditorForModel()
/*the above is equivalent to @Html.EditorFor(model => model) */

/* you need to specify the Address property that the editor accepts? */
@Html.EditorFor(model => model.MailingAddress)

https://stackoverflow.com/questions/6537220/why-not-use-html-editorformodel
https://bradwilson.typepad.com/blog/2009/10/aspnet-mvc-2-templates-part-1-introduction.html
-
-
-
-
-
-
